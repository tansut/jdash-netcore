(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":3}],2:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED'));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        if (request.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};

}).call(this,require('_process'))
},{"../core/createError":9,"./../core/settle":12,"./../helpers/btoa":16,"./../helpers/buildURL":17,"./../helpers/cookies":19,"./../helpers/isURLSameOrigin":21,"./../helpers/parseHeaders":23,"./../utils":25,"_process":26}],3:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"./cancel/Cancel":4,"./cancel/CancelToken":5,"./cancel/isCancel":6,"./core/Axios":7,"./defaults":14,"./helpers/bind":15,"./helpers/spread":24,"./utils":25}],4:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;

},{}],5:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;

},{"./Cancel":4}],6:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};

},{}],7:[function(require,module,exports){
'use strict';

var defaults = require('./../defaults');
var utils = require('./../utils');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;

},{"./../defaults":14,"./../helpers/combineURLs":18,"./../helpers/isAbsoluteURL":20,"./../utils":25,"./InterceptorManager":8,"./dispatchRequest":10}],8:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":25}],9:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 @ @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, response);
};

},{"./enhanceError":11}],10:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};

},{"../cancel/isCancel":6,"../defaults":14,"./../utils":25,"./transformData":13}],11:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 @ @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.response = response;
  return error;
};

},{}],12:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response
    ));
  }
};

},{"./createError":9}],13:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":25}],14:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var PROTECTION_PREFIX = /^\)\]\}',?\n/;
var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      data = data.replace(PROTECTION_PREFIX, '');
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMehtodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

}).call(this,require('_process'))
},{"./adapters/http":2,"./adapters/xhr":2,"./helpers/normalizeHeaderName":22,"./utils":25,"_process":26}],15:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};

},{}],16:[function(require,module,exports){
'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;

},{}],17:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};

},{"./../utils":25}],18:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '');
};

},{}],19:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);

},{"./../utils":25}],20:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],21:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);

},{"./../utils":25}],22:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};

},{"../utils":25}],23:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

},{"./../utils":25}],24:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};

},{}],25:[function(require,module,exports){
'use strict';

var bind = require('./helpers/bind');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  typeof document.createElement -> undefined
 */
function isStandardBrowserEnv() {
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined' &&
    typeof document.createElement === 'function'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};

},{"./helpers/bind":15}],26:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],27:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var helper_1 = require("./helper");
var Configuration = (function () {
    function Configuration(changeCallback) {
        this.changeCallback = changeCallback;
    }
    Configuration.prototype.set = function (key, value) {
        var oldVal = this[key];
        if (this.changeCallback && oldVal !== value) {
            var res = this.changeCallback.apply(this, [key, value, oldVal]);
            if (res === false)
                return false;
            this[key] = value;
            return true;
        }
    };
    Configuration.prototype.get = function (key) {
        return this[key];
    };
    Configuration.prototype.init = function (initialValues) {
        var _this = this;
        for (var prop in this) {
            if (!this.hasOwnProperty(prop) && typeof this[prop] != 'function')
                delete this[prop];
        }
        Object.keys(initialValues || {}).forEach(function (key) {
            _this[key] = initialValues[key];
        });
        return this;
    };
    return Configuration;
}());
exports.Configuration = Configuration;
var HtmlElement = (function (_super) {
    __extends(HtmlElement, _super);
    function HtmlElement() {
        var _this = _super.call(this) || this;
        _this.isInitialized = false;
        var args = Array.prototype.slice.call(arguments);
        _this.created && _this.created.apply(_this, args);
        return _this;
    }
    HtmlElement.prototype.fireEvent = function (name, detail, cancellable, canBubble) {
        if (detail === void 0) { detail = null; }
        if (cancellable === void 0) { cancellable = false; }
        if (canBubble === void 0) { canBubble = false; }
        return helper_1.default.fireEvent(this, name, detail, cancellable, canBubble);
    };
    HtmlElement.prototype.executeAction = function (name, detail, originalEvent) {
        if (detail === void 0) { detail = null; }
        return helper_1.default.executeAction(name, detail, originalEvent, this);
    };
    HtmlElement.prototype.callUserCallback = function (cb, args) {
        var self = this, fn = this[cb];
        setTimeout(function () {
            fn && fn.apply(self, args);
        });
    };
    HtmlElement.prototype.getType = function () {
        return undefined;
    };
    HtmlElement.prototype.initializeElement = function () {
    };
    HtmlElement.prototype.attributeChangedCallback = function (name, oldVal, newVal) {
        var args = Array.prototype.slice.call(arguments);
        this.fireEvent('attributeChanged', {
            name: name,
            oldVal: oldVal,
            newVal: newVal
        });
        this.callUserCallback('attributeChanged', args);
    };
    HtmlElement.prototype.connectedCallback = function () {
        if (!this.isInitialized) {
            var jtype = this.getType();
            jtype && this.setAttribute('j-type', jtype);
            this.initializeElement();
            this.fireEvent('initialized');
            this.callUserCallback('initialized');
            this.isInitialized = true;
        }
        this.fireEvent('connected');
        this.callUserCallback('connected');
    };
    HtmlElement.prototype.disconnectedCallback = function () {
        this.fireEvent('disconnected');
        this.callUserCallback('disconnected');
    };
    return HtmlElement;
}(HTMLElement));
exports.HtmlElement = HtmlElement;
var TemplatedElement = (function (_super) {
    __extends(TemplatedElement, _super);
    function TemplatedElement() {
        var _this = _super.call(this) || this;
        _this.useShadow = false;
        _this.elementContent = _this;
        return _this;
    }
    TemplatedElement.prototype.createShadowRoot = function () {
        var fn = this['attachShadow'];
        var shadowRoot = fn.apply(this, [{ mode: 'open' }]);
        return shadowRoot;
    };
    TemplatedElement.prototype.attributeChangedCallback = function (name, oldVal, newVal) {
        if (name == 'template' && newVal) {
            var template = document.querySelector(newVal);
        }
        _super.prototype.attributeChangedCallback.call(this, name, oldVal, newVal);
    };
    TemplatedElement.prototype.addToSlot = function (newContent, appendAlways) {
        if (appendAlways === void 0) { appendAlways = false; }
        if (this.useShadow) {
            return this.elementContent.appendChild(newContent);
        }
        else {
            var targetSlot = newContent.getAttribute('slot');
            var slot = this.elementContent.querySelector("slot[name=" + targetSlot + "]");
            if (slot) {
                var parent = slot.parentElement;
                if (parent)
                    parent.replaceChild(newContent, slot);
                else
                    slot.appendChild(newContent);
                return newContent;
            }
            else
                return appendAlways ? this.elementContent.appendChild(newContent) : undefined;
        }
    };
    TemplatedElement.prototype.getDefaultTemplate = function () {
        var defaultTemplate = this.getAttribute('default-template');
        return defaultTemplate ? document.querySelector("template#" + this.getAttribute('default-template')) : undefined;
    };
    TemplatedElement.prototype.locateTemplate = function () {
        var located;
        if (this.getAttribute('template')) {
            located = document.querySelector("template#" + this.getAttribute('template'));
        }
        if (this.getAttribute('remote-template')) {
        }
        if (!located)
            located = this.querySelector('template');
        if (!located)
            located = document.querySelector("template#" + this.tagName.toLowerCase());
        if (!located)
            located = this.getDefaultTemplate();
        return located;
    };
    TemplatedElement.prototype.createChildren = function (parent) {
        this.template = this.template || this.locateTemplate();
        if (this.template) {
            var clone = document.importNode(this.template.content, true);
            parent.appendChild(clone);
        }
    };
    TemplatedElement.prototype.connectedCallback = function () {
        if (!this.isInitialized) {
            this.useShadow = this.getAttribute('j-attach-shadow') == 'true';
            this.elementContent = this.useShadow ? this.createShadowRoot() : this;
            this.createChildren(this.elementContent);
        }
        _super.prototype.connectedCallback.call(this);
    };
    return TemplatedElement;
}(HtmlElement));
exports.TemplatedElement = TemplatedElement;
var ComponentGeneratedElement = (function (_super) {
    __extends(ComponentGeneratedElement, _super);
    function ComponentGeneratedElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ComponentGeneratedElement.prototype.locateTemplate = function () {
        var located = this.template || _super.prototype.locateTemplate.call(this);
        !located && this.component && (located = this.component.template);
        return located;
    };
    ComponentGeneratedElement.prototype.initializeElement = function () {
    };
    ComponentGeneratedElement.prototype.connectedCallback = function () {
        if (!this.isInitialized) {
            this.component = this.component || Component.getByTag(this.tagName.toLowerCase());
            this.component && this.component.initElement(this);
        }
        _super.prototype.connectedCallback.call(this);
    };
    return ComponentGeneratedElement;
}(TemplatedElement));
exports.ComponentGeneratedElement = ComponentGeneratedElement;
var ComponentElement = (function (_super) {
    __extends(ComponentElement, _super);
    function ComponentElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ComponentElement;
}(ComponentGeneratedElement));
exports.ComponentElement = ComponentElement;
var Component = (function (_super) {
    __extends(Component, _super);
    function Component() {
        var _this = _super.call(this) || this;
        _this.elementRegistered = false;
        _this.defineScriptExecuted = false;
        _this.options = {};
        if (_this.elementTag)
            Component.definedElements[_this.elementTag] = _this;
        helper_1.default.fireEvent(window, 'jdash:component.created', {
            component: _this
        });
        return _this;
    }
    Component.prototype.initElement = function (el, defaults) {
        defaults = defaults || {};
        for (var i = 0; i < this.attributes.length; i++) {
            var attribute = this.attributes[i];
            if (Component.reservedAttributes.indexOf(attribute.name) >= 0)
                continue;
            var attributeVal = defaults[attribute.name] || attribute.value;
            el.getAttribute(attribute.name) || el.setAttribute(attribute.name, attributeVal);
        }
        Object.keys(defaults).forEach(function (key) {
            if (!el.getAttribute(key)) {
                var dskey = key;
                el.setAttribute(dskey, defaults[key]);
            }
            else
                el.setAttribute(key, defaults[key]);
        });
        return el;
    };
    Component.getByTag = function (tag) {
        return Component.definedElements[tag];
    };
    Component.locate = function (options) {
        var component = null;
        if (typeof options == 'object' && options.is) {
            var tag = options.is;
            component = Component.getByTag(tag);
        }
        else if (typeof options == 'string') {
            component = Component.getByTag(tag);
        }
        else {
            var script = document['_currentScript'] || document.currentScript;
            component = script ? script.parentElement : undefined;
        }
        return component;
    };
    Component.prototype.setElementClassProperties = function () {
        this.elementClass.prototype['component'] = this;
        this.options.createdCallback && (this.elementClass.prototype['created'] = this.options.createdCallback);
    };
    Component.prototype.getBaseElementClass = function () {
        return ComponentElement;
    };
    Component.prototype.generateElementClass = function () {
        var requestedClass = (this.options && this.options.elementClass) || this.getBaseElementClass();
        var generatedClass = helper_1.default.inherit(requestedClass);
        return generatedClass;
    };
    Component.prototype.registerElement = function () {
        var tag = this.elementTag;
        if (!tag)
            throw new Error('Element tag should be set using id, name, is attribute or calling jdash.define with options.is');
        this.elementClass = this.generateElementClass();
        this.setElementClassProperties();
        Component.definedElements[tag] = this;
        var existing = window.customElements.get(tag);
        if (!existing)
            window.customElements.define(tag, this.elementClass);
        this.elementRegistered = true;
    };
    Component.prototype.connectedCallback = function () {
        this.template = this.querySelector('template');
        helper_1.default.fireEvent(window, 'jdash:component.connected', {
            component: this
        });
        if (this.getAttribute('delay-register') != 'true' && !this.elementRegistered)
            this.registerElement();
        _super.prototype.connectedCallback.call(this);
    };
    Component.prototype.runDefineScript = function (options) {
        if (this.defineScriptExecuted)
            return;
        this.options = options;
        if (this.elementRegistered) {
            this.setElementClassProperties();
            if (this.options.elementClass)
                throw new Error('Element already registered. Please add delay-register attribute to set a different element class');
        }
        else {
            this.registerElement();
        }
        this.defineScriptExecuted = true;
    };
    Component.elementTag = function (node) {
        return node.id || node.getAttribute('name') || node.getAttribute('is');
    };
    Object.defineProperty(Component.prototype, "elementTag", {
        get: function () {
            return (this.options && this.options.is) || Component.elementTag(this);
        },
        enumerable: true,
        configurable: true
    });
    Component.define = function (id, handler) {
        var args = arguments;
        var component = Component.locate(id);
        var options = {};
        if (args.length == 1) {
            if (typeof id == 'string')
                options.is = id;
            else if (typeof id == 'function')
                options.createdCallback = id;
            else if (typeof id == 'object')
                options = id;
        }
        else if (args.length == 2) {
            options.is = id;
            if (typeof handler == 'function')
                options.createdCallback = handler;
            else if (typeof handler == 'object') {
                options.elementClass = handler['elementClass'];
                options.createdCallback = handler['createdCallback'];
            }
        }
        var elementTag = options.is || (component && Component.elementTag(component));
        if (!elementTag)
            throw new Error('Need an element tag either by id or functions arguments');
        window.customElements.whenDefined('j-component').then(function (e) {
            component = component || Component.getByTag(elementTag);
            component && component.runDefineScript && component.runDefineScript(options);
        });
        window.addEventListener('jdash:component.created', function (e) {
            component = component || Component.getByTag(elementTag);
            component && (component == e.detail.component || options.is == component.elementTag) && component.runDefineScript && component.runDefineScript(options);
        });
        window.addEventListener('jdash:component.connected', function (e) {
            component = component || Component.getByTag(elementTag);
            if (component == e.detail.component || e.detail.component.elementTag == options.is) {
                component = e.detail.component;
                component.runDefineScript && component.runDefineScript(options);
            }
        });
    };
    return Component;
}(HtmlElement));
Component.definedElements = {};
Component.reservedAttributes = ['id', 'name', 'is'];
exports.Component = Component;

},{"./helper":32}],28:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("../core");
var helper_1 = require("../helper");
var helper_2 = require("../helper");
exports.IDashletElementStatus = {
    created: 'created',
    loaded: 'loaded'
};
exports.DashletViewMode = {
    readonly: 'readonly',
    configure: 'configure',
    preview: 'preview'
};
var DashletContext = (function () {
    function DashletContext() {
    }
    return DashletContext;
}());
exports.DashletContext = DashletContext;
var Dashlet = (function (_super) {
    __extends(Dashlet, _super);
    function Dashlet() {
        var _this = _super.call(this) || this;
        _this.status = exports.IDashletElementStatus.created;
        _this._viewMode = exports.DashletViewMode.readonly;
        _this._configObject = new core_1.Configuration(function (key, newVal, oldVal) {
            var result = _this.executeAction('configitemupdated', {
                key: key,
                newVal: newVal,
                oldVal: oldVal
            });
        });
        return _this;
    }
    Object.defineProperty(Dashlet.prototype, "canBeConfigured", {
        get: function () {
            var editorTag = this.getAttribute('j-editor') || this.tagName.toLowerCase() + "-editor";
            if (editorTag == 'none')
                return false;
            var isDefined = window.customElements.get(editorTag);
            return isDefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashlet.prototype, "model", {
        get: function () {
            return this._model;
        },
        set: function (val) {
            if (val.id) {
                this.id = this.id || val.id;
                this.setAttribute('j-provider-id', val.id);
            }
            else
                this.removeAttribute('j-provider-id');
            this.config = val.configuration;
            this.title = val.title;
            this._model = val;
        },
        enumerable: true,
        configurable: true
    });
    Dashlet.prototype.updateFromModel = function () {
        if (this.model) {
            this.id = this.id || this.model.id;
            this.setAttribute('j-provider-id', this.model.id);
            this.title = this.model.title;
            this.config = this.model.configuration;
        }
    };
    Dashlet.prototype.updateModel = function () {
        if (this.model) {
            var id = this.getAttribute('j-provider-id') || this.id;
            id && (this.model.id = id);
            this.model.configuration = this.config;
            this.model.title = this.title;
        }
    };
    Object.defineProperty(Dashlet.prototype, "panel", {
        get: function () {
            return this._panel || helper_1.default.getContainingType(this, 'j-dashlet-panel');
        },
        set: function (v) {
            this._panel = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashlet.prototype, "Provider", {
        get: function () {
            if (this._provider)
                return this._provider;
            if (this.layout && this.layout.dashboard && this.layout.dashboard.provider)
                this._provider = this.layout.dashboard.provider;
            return this._provider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashlet.prototype, "viewMode", {
        get: function () {
            return this._viewMode;
        },
        set: function (newVal) {
            if (this.viewMode != newVal) {
                this._viewMode = newVal;
                this.setAttribute('j-view-mode', newVal);
            }
        },
        enumerable: true,
        configurable: true
    });
    Dashlet.prototype.getType = function () {
        return 'j-dashlet';
    };
    Dashlet.prototype.setViewMode = function (newVal) {
        this.panel && this.panel.setAttribute('j-view-mode', newVal);
        switch (newVal) {
            case exports.DashletViewMode.readonly: {
                this.setDashletViewModeConfigure(false);
                this.setDashletViewModePreview(false);
                this.setDashletViewModeReadonly(true);
                break;
            }
            case exports.DashletViewMode.configure: {
                this.setDashletViewModePreview(false);
                this.setDashletViewModeReadonly(false);
                this.setDashletViewModeConfigure(true);
                break;
            }
            case exports.DashletViewMode.preview: {
                this.setDashletViewModeConfigure(false);
                this.setDashletViewModeReadonly(false);
                this.setDashletViewModePreview(true);
                break;
            }
        }
        this.arrangeTitleNodes();
    };
    Dashlet.prototype.setDashletViewModeReadonly = function (enable) {
    };
    Dashlet.prototype.setDashletViewModePreview = function (enable) {
    };
    Dashlet.prototype.setDashletViewModeConfigure = function (enable) {
        var _this = this;
        var container = this.panel || this;
        var target = container.querySelector('[j-type="j-dashlet-configuration-tools"]:not(template)');
        var configureTemplate = helper_1.default.locateTemplate(this, 'j-dashlet-configuration-tools', true);
        if (enable) {
            configureTemplate && helper_1.default.instantiateTemplate(configureTemplate, target, {
                position: helper_2.TemplateInstantiatePosition.insert,
                preProcess: function (clone, el) {
                    helper_1.default.bindActions(clone, {
                        'zone': el
                    }, _this);
                    helper_1.default.setBindings(clone);
                    target && helper_1.default.hideElements(target, false);
                }
            });
        }
        else {
            configureTemplate && helper_1.default.removeTemplateInstances(container, configureTemplate);
            target && helper_1.default.hideElements(target, true);
        }
        var configureActions = container.querySelectorAll('[j-action="configuredashlet"]');
        helper_1.default.hideElements(configureActions, !this.canBeConfigured);
    };
    Object.defineProperty(Dashlet.prototype, "config", {
        get: function () {
            return this._configObject;
        },
        set: function (newVal) {
            var oldVal = this._configObject;
            if (newVal instanceof core_1.Configuration) {
                if (newVal === oldVal)
                    return;
                this._configObject = newVal;
            }
            else {
                this._configObject.init(newVal);
            }
        },
        enumerable: true,
        configurable: true
    });
    Dashlet.prototype.configurationChangeHandler = function (event) {
    };
    Dashlet.prototype.configurationSaveHandler = function (event) {
    };
    Dashlet.prototype.saveConfiguration = function () {
        var _this = this;
        var detail = {};
        var res = this.executeAction('saveconfig', detail);
        if (res == false)
            Promise.reject('cancel');
        return Promise.resolve(detail.$waitFor).then(function () {
            if (!_this.Provider)
                return Promise.reject('no provider');
            return _this.Provider.saveDashlet(_this.getAttribute('j-provider-id') || _this.id, { configuration: _this.config });
        });
    };
    Object.defineProperty(Dashlet, "observedAttributes", {
        get: function () {
            return ['disabled', 'title', 'j-view-mode', 'j-zone', 'j-x', 'j-y', 'j-z'];
        },
        enumerable: true,
        configurable: true
    });
    Dashlet.prototype.createPanelForDashletEditor = function (editorElement) {
        var panelTag = editorElement.getAttribute('j-panel') || 'j-dashlet-editor-panel';
        if (panelTag && panelTag != 'none') {
            var panel = document.createElement(panelTag);
            panel.setAttribute('j-type', 'j-dashlet-editor-panel');
            panel.editor = editorElement;
            return panel;
        }
        else {
            var el = document.createElement('div');
            el.setAttribute('j-type', 'j-dashlet-editor-panel');
            el['editor'] = editorElement;
            el.appendChild(editorElement);
            return el;
        }
    };
    Dashlet.prototype.openConfiguration = function () {
        var editorTag = this.getAttribute('j-editor') || this.tagName.toLowerCase() + "-editor";
        var editor = document.createElement(editorTag);
        var editorPanel = this.createPanelForDashletEditor(editor);
        editor.panel = editorPanel;
        editor.dashlet = this;
        editorPanel.classList.add(editorTag);
        this.editor = editor;
        this.appendChild(editorPanel);
    };
    Dashlet.prototype.configureDashletActionHandler = function (event) {
        return this.openConfiguration();
    };
    Dashlet.prototype.cloneDashletActionHandler = function (event) {
        return this.layout && this.layout.cloneDashlet(this);
    };
    Dashlet.prototype.removeDashletActionHandler = function (event) {
        return this.layout && this.layout.removeDashlet(this);
    };
    Dashlet.prototype.arrangeTitleNodes = function () {
        var container = (this.panel || this);
        var headerTemplate = helper_1.default.locateTemplate(this, 'j-dashlet-header', true);
        if (!headerTemplate) {
            var items = container.querySelectorAll('[j-type="j-dashlet-title"]');
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                if (!this.title) {
                    item.style.display = 'none';
                    item.textContent = '';
                }
                else {
                    item.textContent = this.title;
                    item.style.display = '';
                }
            }
        }
        else {
            helper_1.default.removeTemplateInstances(container, headerTemplate);
            if (this.viewMode != 'readonly') {
                helper_1.default.instantiateTemplate(headerTemplate);
            }
            else if (this.title && this.title.trim() != '')
                helper_1.default.instantiateTemplate(headerTemplate);
        }
        if (!this.title)
            container.classList.add('j-no-title');
        else
            container.classList.remove('j-no-title');
        helper_1.default.setBindings(container, this, '[j-bind][j-type="j-dashlet-title"]');
    };
    Dashlet.prototype.editDashletTitleActionHandler = function (event) {
        var _this = this;
        var newTitle = prompt('Title', this.title);
        if (newTitle !== null) {
            var dashletId = this.getAttribute('j-provider-id') || this.id;
            if (this.Provider) {
                event.detail.$waitFor = this.Provider.saveDashlet(dashletId, {
                    title: newTitle
                }).then(function () {
                    _this.title = newTitle;
                    _this.arrangeTitleNodes();
                });
            }
            else
                this.title = newTitle;
        }
    };
    Dashlet.prototype.listenforActions = function () {
        helper_1.default.addActionListener('configuredashlet', this.configureDashletActionHandler.bind(this), this);
        helper_1.default.addActionListener('clonedashlet', this.cloneDashletActionHandler.bind(this), this);
        helper_1.default.addActionListener('removedashlet', this.removeDashletActionHandler.bind(this), this);
        helper_1.default.addActionListener('setdashlettitle', this.editDashletTitleActionHandler.bind(this), this);
        helper_1.default.addActionListener('configurationchange', this.configurationChangeHandler.bind(this), this);
        helper_1.default.addActionListener('configurationsave', this.configurationSaveHandler.bind(this), this);
    };
    Dashlet.prototype.initializeElement = function () {
        _super.prototype.initializeElement.call(this);
        this.setViewMode(this.viewMode);
        this.listenforActions();
        this.arrangeTitleNodes();
        this.panel && this.panel.classList.add(this.tagName.toLowerCase() + '-panel');
        helper_1.default.setBindings(this.panel || this, this);
    };
    Dashlet.prototype.connectedCallback = function () {
        _super.prototype.connectedCallback.call(this);
        this.model && (this.title = this.model.title);
    };
    Dashlet.prototype.attributeChangedCallback = function (name, oldVal, newVal) {
        if (name == 'title' && this.isInitialized) {
            this.arrangeTitleNodes();
        }
        if (name == 'j-view-mode') {
            this._viewMode = newVal;
            this.isInitialized && this.setViewMode(newVal);
        }
        _super.prototype.attributeChangedCallback.call(this, name, oldVal, newVal);
    };
    return Dashlet;
}(core_1.ComponentGeneratedElement));
exports.Dashlet = Dashlet;
var DashletEditor = (function (_super) {
    __extends(DashletEditor, _super);
    function DashletEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DashletEditor;
}(core_1.ComponentGeneratedElement));
exports.DashletEditor = DashletEditor;
var DashletEditorModule = (function (_super) {
    __extends(DashletEditorModule, _super);
    function DashletEditorModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashletEditorModule.prototype.getBaseElementClass = function () {
        return DashletEditor;
    };
    return DashletEditorModule;
}(core_1.Component));
exports.DashletEditorModule = DashletEditorModule;
var DashletModule = (function (_super) {
    __extends(DashletModule, _super);
    function DashletModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashletModule.prototype.getBaseElementClass = function () {
        return Dashlet;
    };
    DashletModule.getModules = function () {
        var modules = this.definedElements;
        var list = [];
        Object.keys(modules).forEach(function (k) {
            var elementInfo = modules[k];
            if (elementInfo instanceof DashletModule)
                list.push(elementInfo);
        });
        return list;
    };
    DashletModule.getByTag = function (tag) {
        return core_1.Component.definedElements[tag];
    };
    DashletModule.prototype.createEditorForDashlet = function (dashlet) {
    };
    DashletModule.createModule = function (id, defaults) {
        var component = document.createElement('j-dashlet');
        component.id = typeof id == 'string' ? id : id.tagName.toLowerCase();
        return component;
    };
    return DashletModule;
}(core_1.Component));
exports.DashletModule = DashletModule;

},{"../core":27,"../helper":32}],29:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("../core");
var helper_1 = require("../helper");
var DashletEditorPanel = (function (_super) {
    __extends(DashletEditorPanel, _super);
    function DashletEditorPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashletEditorPanel.prototype.closeEditor = function (canceled) {
        this.remove();
        this.editor.dashlet.editor = undefined;
    };
    DashletEditorPanel.prototype.getType = function () {
        return 'j-dashlet-editor-panel';
    };
    DashletEditorPanel.prototype.closeEditorActionHandler = function (event) {
        this.closeEditor(true);
    };
    DashletEditorPanel.prototype.saveConfigActionHandler = function (event) {
        var _this = this;
        var detail = event.detail || {};
        detail.$waitFor = this.editor.dashlet.saveConfiguration();
        Promise.resolve(detail.$waitFor).then(function (res) {
            if (res == false)
                return;
            _this.closeEditor(false);
        });
    };
    DashletEditorPanel.prototype.initializeElement = function () {
        helper_1.default.addActionListener('closeeditor', this.closeEditorActionHandler.bind(this), this.editor);
        helper_1.default.addActionListener('setconfig', this.saveConfigActionHandler.bind(this), this.editor);
        this.firstElementChild.style.display = 'block';
    };
    DashletEditorPanel.prototype.createChildren = function (parent) {
        _super.prototype.createChildren.call(this, parent);
        if (this.editor) {
            this.editor.setAttribute('slot', 'body');
            this.addToSlot(this.editor, true);
            helper_1.default.setBindings(this, this.editor.dashlet);
        }
        helper_1.default.bindActions(this, { dashlet: this.editor.dashlet }, this.editor);
    };
    DashletEditorPanel.prototype.connectedCallback = function () {
        _super.prototype.connectedCallback.call(this);
    };
    return DashletEditorPanel;
}(core_1.ComponentGeneratedElement));
exports.DashletEditorPanel = DashletEditorPanel;
var DashletEditorPanelModule = (function (_super) {
    __extends(DashletEditorPanelModule, _super);
    function DashletEditorPanelModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashletEditorPanelModule.prototype.getBaseElementClass = function () {
        return DashletEditorPanel;
    };
    return DashletEditorPanelModule;
}(core_1.Component));
exports.DashletEditorPanelModule = DashletEditorPanelModule;
core_1.Component.define('j-dashlet-editor-panel', {
    elementClass: DashletEditorPanel
});

},{"../core":27,"../helper":32}],30:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("../core");
var DashletPanel = (function (_super) {
    __extends(DashletPanel, _super);
    function DashletPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DashletPanel.prototype, "dashlet", {
        get: function () {
            return this._dashlet || this.querySelector('[j-type="j-dashlet-"]');
        },
        set: function (v) {
            this._dashlet = v;
        },
        enumerable: true,
        configurable: true
    });
    DashletPanel.prototype.createChildren = function (parent) {
        _super.prototype.createChildren.call(this, parent);
        if (this.dashlet) {
            this.dashlet.setAttribute('slot', 'body');
            this.addToSlot(this.dashlet, true);
        }
    };
    DashletPanel.prototype.getType = function () {
        return 'j-dashlet-panel';
    };
    DashletPanel.prototype.connectedCallback = function () {
        _super.prototype.connectedCallback.call(this);
    };
    return DashletPanel;
}(core_1.ComponentGeneratedElement));
exports.DashletPanel = DashletPanel;
var DashletPanelModule = (function (_super) {
    __extends(DashletPanelModule, _super);
    function DashletPanelModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DashletPanelModule.prototype.getBaseElementClass = function () {
        return DashletPanel;
    };
    return DashletPanelModule;
}(core_1.Component));
exports.DashletPanelModule = DashletPanelModule;
core_1.Component.define('j-dashlet-panel', {
    elementClass: DashletPanel
});

},{"../core":27}],31:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var jdash_1 = require("../jdash");
var dashlet_1 = require("./dashlet");
var core_1 = require("../core");
var layout_1 = require("../layout");
var helper_1 = require("../helper");
exports.DashboardState = {
    none: 'none',
    loading: 'loading',
    loaded: 'loaded'
};
var Dashboard = (function (_super) {
    __extends(Dashboard, _super);
    function Dashboard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._state = exports.DashboardState.none;
        return _this;
    }
    Object.defineProperty(Dashboard, "observedAttributes", {
        get: function () {
            return ['j-provider', 'j-provider-id', 'j-layout', 'j-view-mode', 'title'];
        },
        enumerable: true,
        configurable: true
    });
    Dashboard.prototype.getType = function () {
        return 'j-dashboard';
    };
    Object.defineProperty(Dashboard.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (newVal) {
            var oldVal = this._state;
            this._state = newVal;
            this.fireEvent('state-change', {
                newVal: newVal,
                oldVal: oldVal
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashboard.prototype, "provider", {
        get: function () {
            if (!this._provider) {
                var located = this.locateProvider();
                located && (this._provider = located);
            }
            return this._provider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashboard.prototype, "model", {
        get: function () {
            return this._model;
        },
        set: function (val) {
            if (!val) {
                this.title = '';
                this.removeAttribute('j-provider-id');
            }
            else {
                if (val.id) {
                    this.id = this.id || val.id;
                    this.setAttribute('j-provider-id', val.id);
                }
                else
                    this.removeAttribute('j-provider-id');
                this.title = val.title;
            }
            this._model = val;
            helper_1.default.setBindings(this);
        },
        enumerable: true,
        configurable: true
    });
    Dashboard.prototype.initializeLayout = function () {
        this._layout.dashboard = this;
        var viewMode = this.getAttribute('j-view-mode');
        viewMode && (this.layout.viewMode = viewMode);
        var style = this.getAttribute('j-layout-style');
        style && (this.layout.layoutStyle = style);
        this.fireEvent('layout-ready');
    };
    Object.defineProperty(Dashboard.prototype, "layout", {
        get: function () {
            return this._layout;
        },
        set: function (newVal) {
            if (this._layout != newVal) {
                this._layout = newVal;
                this.initializeLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Dashboard.prototype.unload = function () {
        this.layout.reset();
        this.model = undefined;
        helper_1.default.setBindings(this);
        this.state = exports.DashboardState.none;
    };
    Dashboard.prototype.load = function (id) {
        var _this = this;
        if (this.state == exports.DashboardState.loaded)
            this.unload();
        if (this.state == exports.DashboardState.loading)
            return Promise.reject(new Error('Loading not completed'));
        this.state = exports.DashboardState.loading;
        var promise = this.provider.getDashboard(typeof id == 'string' ? id : id.id);
        return promise.then(function (dashboardData) {
            _this.model = dashboardData.dashboard;
            return Promise.resolve(_this.layout.load(_this.model.layout, dashboardData.dashlets)).then(function () {
                _this.state = exports.DashboardState.loaded;
                return dashboardData.dashboard;
            });
        }).catch(function (err) {
            _this.state = exports.DashboardState.none;
            return Promise.reject(err);
        });
    };
    Dashboard.prototype.moveDashlet = function (dashletElement, to) {
        var _this = this;
        return Promise.resolve(this.layout.moveDashlet(dashletElement, to)).then(function (updatedDashlets) {
            var providerValues = {};
            updatedDashlets.forEach(function (dashlet) {
                providerValues[dashlet.getAttribute('j-provider-id')] = _this.getDashletPosition(dashlet);
            });
        });
    };
    Dashboard.prototype.locateTemplate = function () {
        return _super.prototype.locateTemplate.call(this);
    };
    Dashboard.prototype.getDashletAt = function (position) {
        return this.layout.getDashletAt(position);
    };
    Dashboard.prototype.getDashletPosition = function (dashletElement) {
        return this.layout.getElementPosition(dashletElement);
    };
    Dashboard.prototype.connectedCallback = function () {
        _super.prototype.connectedCallback.call(this);
    };
    Dashboard.prototype.locateProvider = function () {
        return jdash_1.JDash['Provider'];
    };
    Dashboard.prototype.hideDashlets = function (hide) {
        this.layout.hideDashlets(hide);
    };
    Dashboard.prototype.collapseDashlets = function (hide) {
        this.layout.collapseDashlets(hide);
    };
    Dashboard.prototype.toggleDashlets = function (hide) {
        this.layout.toggleDashlets();
    };
    Dashboard.prototype.toggleCollapseDashlets = function (hide) {
        this.layout.toggleCollapseDashlets();
    };
    Dashboard.prototype.createDefaultLayout = function () {
        var layout = document.createElement('j-grid-layout');
        return layout;
    };
    Dashboard.prototype.initializeElement = function () {
        var layoutFoundInside = false;
        if (!this._layout) {
            var baseLayout = layout_1.DashboardLayout;
            var locatedLayout = helper_1.default.locateElementType(this, baseLayout);
            if (locatedLayout.length > 0) {
                this.layout = locatedLayout[0];
                layoutFoundInside = true;
            }
        }
        this.layout = this.layout || this.createDefaultLayout();
        layoutFoundInside || this.appendChild(this.layout);
        helper_1.default.setBindings(this);
    };
    Dashboard.prototype.attributeChangedCallback = function (name, oldVal, newVal) {
        if (name == 'title' && this.isInitialized) {
            helper_1.default.setBindings(this, this);
        }
        if (name.toLowerCase() == 'j-view-mode' && this.layout)
            this.layout.viewMode = newVal;
        if (name.toLowerCase() == 'j-style' && this.layout)
            this.layout.layoutStyle = newVal;
        if (name.toLowerCase() == 'j-layout') {
            if (this.isInitialized) {
            }
            else {
                this.layout = document.createElement(name);
            }
        }
    };
    Dashboard.prototype.addDashlet = function (dashletEl, position) {
        var dashlet, model;
        if (typeof dashletEl == 'string') {
            var module = dashlet_1.DashletModule.getByTag(dashletEl);
            model = {
                moduleId: (module && module.elementTag) || dashletEl,
                title: (module && module.title) || '',
                dashboardId: this.getAttribute('j-provider-id') || this.id,
                createdAt: undefined
            };
            dashlet = this.layout.generateDashletElement(model, dashlet_1.IDashletElementStatus.created);
        }
        else if (dashletEl instanceof dashlet_1.Dashlet) {
            dashlet = dashletEl;
            model = {
                moduleId: dashletEl.tagName.toLowerCase(),
                title: dashletEl.title,
                dashboardId: this.getAttribute('j-provider-id') || this.id,
                createdAt: undefined
            };
        }
        else if (dashletEl instanceof dashlet_1.DashletModule) {
            var module = dashletEl;
            model = {
                moduleId: (module && module.elementTag),
                title: (module && module.title) || '',
                dashboardId: this.getAttribute('j-provider-id') || this.id,
                createdAt: undefined
            };
            dashlet = this.layout.generateDashletElement(model, dashlet_1.IDashletElementStatus.created);
        }
        else {
            model = dashletEl;
            dashlet = this.layout.generateDashletElement(model, dashlet_1.IDashletElementStatus.created);
        }
        this.layout.placeDashlet(dashlet, position);
    };
    return Dashboard;
}(core_1.TemplatedElement));
exports.Dashboard = Dashboard;
core_1.Component.define('j-dashboard', {
    elementClass: Dashboard
});

},{"../core":27,"../helper":32,"../jdash":33,"../layout":36,"./dashlet":28}],32:[function(require,module,exports){
"use strict";
exports.TemplateInstantiatePosition = {
    insert: 'insert',
    append: 'append',
    sibling: 'sibling',
    auto: 'auto'
};
var Helper = (function () {
    function Helper() {
    }
    Helper.elementIndex = function (parent, child) {
        for (var i = 0; i < parent.children.length; i++)
            if (parent.children[i] == child)
                return i;
        return -1;
    };
    Helper.cloneElement = function (source, deep, discardedAttributes, existingAttributes) {
        discardedAttributes = discardedAttributes || {};
        existingAttributes = existingAttributes || {};
        var shouldClone = function (el) {
            var keys = Object.keys(discardedAttributes);
            for (var i = 0; i < keys.length; i++) {
                var k = keys[i];
                var values = discardedAttributes[k];
                if (typeof values == 'string')
                    values = [values];
                var attrVal = el.getAttribute(k);
                if (typeof attrVal != 'undefined') {
                    if (values.indexOf(attrVal) >= 0)
                        return false;
                }
            }
            keys = Object.keys(existingAttributes);
            if (keys.length > 0) {
                for (var i = 0; i < keys.length; i++) {
                    var k = keys[i];
                    var values = existingAttributes[k];
                    if (typeof values == 'string')
                        values = [values];
                    var attrVal = el.getAttribute(k);
                    if (typeof attrVal != 'undefined') {
                        if (values.indexOf(attrVal) >= 0)
                            return true;
                    }
                }
                return false;
            }
            return true;
        };
        var cloneIt = function (el, includeTextNodes) {
            if (includeTextNodes === void 0) { includeTextNodes = false; }
            var cloned = el.cloneNode();
            return cloned;
        };
        var deepCloned = function (el, level) {
            if (level === void 0) { level = 0; }
            if (shouldClone(el)) {
                var clone = cloneIt(el, true);
                if (typeof deep != 'undefined' && typeof deep != 'boolean' && deep < level)
                    return clone;
                level++;
                for (var i = 0; i < el.childNodes.length; i++) {
                    var child = el.childNodes[i];
                    if (child.nodeType == 3)
                        clone.appendChild(child.cloneNode());
                    else if (shouldClone(child)) {
                        var clonedChild = deepCloned(child, level);
                        clonedChild && clone.appendChild(clonedChild);
                    }
                }
                return clone;
            }
            else
                return null;
        };
        if (deep === false || typeof deep == 'undefined' || deep === 0) {
            if (shouldClone(source))
                return cloneIt(source);
        }
        else {
            return deepCloned(source);
        }
    };
    Helper.moveElement = function (el, direction, selector) {
        direction = direction || 'next';
        var siblings = Helper.getImmidiateSiblings(el, selector, true);
        if (siblings.length < 2)
            return;
        var index = Array.prototype.indexOf.call(siblings, el);
        if (index < 0)
            return;
        var targetIndex;
        if (index == 0 && direction == 'prev') {
            targetIndex = siblings.length - 1;
            direction = 'next';
        }
        else if (index == siblings.length - 1 && direction == 'next') {
            targetIndex = 0;
            direction = 'prev';
        }
        else {
            targetIndex = direction == 'next' ? index + 1 : index - 1;
        }
        var childAtTargetIndex = siblings[targetIndex];
        direction == 'next' ? el.parentElement.insertBefore(childAtTargetIndex, el) : el.parentElement.insertBefore(el, childAtTargetIndex);
    };
    Helper.executeAction = function (action, actionParams, originalEvent, context) {
        var eventDetail = {
            $event: originalEvent,
        };
        actionParams && Object.keys(actionParams).forEach(function (k) { return eventDetail[k] = actionParams[k]; });
        context = context || window;
        var handlers = context["j-action-" + action + "-handlers"] || [];
        var executeHandler = context["j-action-" + action + "-execute-handler"];
        if (!executeHandler) {
            context.addEventListener("execute-" + action, function (event) {
                var before = Helper.fireEvent(context || window, "" + action, event.detail, true, true);
                if (before == false) {
                    event.cancelable && event.preventDefault();
                    return;
                }
                var waitForPromise = event.detail.$waitFor;
                Promise.resolve(waitForPromise).then(function () {
                    handlers.forEach(function (handler) { return handler.apply(context, [event]); });
                    Helper.fireEvent(context || window, "after-" + action, event.detail, false, true);
                });
            });
            context["j-action-" + action + "-execute-handler"] = true;
        }
        return Helper.fireEvent(context, "execute-" + action, eventDetail, true, true);
    };
    Helper.setBindings = function (container, context, selector) {
        context = context || container;
        var elements = container.querySelectorAll(selector || '[j-bind]');
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i], attrVal = el.getAttribute('j-bind');
            var elementContext = el['__j-binding-context'] || (el['__j-binding-context'] = context);
            if (elementContext === context) {
                var val = attrVal ? context[attrVal] : context;
                if (val)
                    el.textContent = val.toString();
                else {
                    var defaultVal = el.getAttribute('j-bind-default');
                    defaultVal && (el.innerHTML = defaultVal);
                }
            }
        }
    };
    Helper.bindActions = function (container, parameters, context) {
        var _this = this;
        var parseActionParams = function (val) {
            var result = {};
            if (val) {
                var parts = val.split(',');
                parts.forEach(function (part) {
                    var nameValues = part.split(':');
                    result[nameValues[0]] = nameValues[1];
                });
            }
            return result;
        };
        var actionElements = container.querySelectorAll('[j-action]');
        var fn = function (event, handler, actionParts) {
            var actionParams = [event].concat(actionParts.slice(1));
            handler.apply(_this, actionParams);
        };
        for (var i = 0; i < actionElements.length; i++) {
            var el = actionElements[i];
            var action = el.getAttribute('j-action'), actionParamsOnAttribute = el.getAttribute('j-action-params');
            var actionParameters = parseActionParams(actionParamsOnAttribute);
            if (parameters) {
                Object.keys(parameters).forEach(function (k) {
                    var val = parameters[k];
                    actionParameters[k] = val;
                });
            }
            (function (action, actionParameters) {
                el.addEventListener('click', function (event) { return Helper.executeAction.apply(null, ["" + action, actionParameters, event, context]); });
            })(action, actionParameters);
        }
    };
    Helper.addActionListener = function (action, handler, context) {
        var handlers = context["j-action-" + action + "-handlers"] || [];
        handlers.push(handler);
        context["j-action-" + action + "-handlers"] = handlers;
    };
    Helper.ensureId = function (container, attr) {
        var emptyElements = container.querySelectorAll("[" + attr + "=\"\"]");
        for (var i = 0; i < emptyElements.length; i++)
            emptyElements[i].setAttribute(attr, this.makeid());
    };
    Helper.locateElementType = function (container, type, deep) {
        var result = [];
        var findType = function (el) {
            if (!deep && result.length > 0)
                return;
            for (var i = 0; i < el.children.length; i++) {
                var child = el.children[i];
                findType(child);
                if (child instanceof type)
                    result.push(child);
            }
        };
        findType(container);
        return result;
    };
    Helper.getSiblings = function (el, selector) {
        var parentEl = el.parentElement;
        var allItems = parentEl.querySelectorAll(selector);
        return Array.prototype.filter.call(allItems, function (item) { return item !== el; });
    };
    Helper.getImmidiateSiblings = function (el, selector, includeSelf) {
        var parentEl = el.parentElement;
        var allItems = parentEl.querySelectorAll(selector);
        return Array.prototype.filter.call(allItems, function (item) {
            if (!includeSelf && item === el)
                return false;
            if (item.parentElement !== parentEl)
                return false;
            return true;
        });
    };
    Helper.extractTemplate = function (template) {
        var clone = document.importNode(template.content, true);
        var topEl;
        if (clone.children.length > 1 || template.getAttribute('j-target-tag')) {
            topEl = document.createElement(template.getAttribute('j-target-tag') || 'div');
            topEl.appendChild(clone);
        }
        else if (clone.children.length < 1) {
            topEl = document.createElement(template.getAttribute('j-target-tag') || 'div');
        }
        else
            topEl = clone.children[0];
        topEl.className = topEl.className + (template.className || '');
        for (var i = 0; i < template.attributes.length; i++) {
            topEl.setAttribute(template.attributes[i].name, template.attributes[i].value);
        }
        topEl.setAttribute('j-template-generated', '');
        return topEl;
    };
    Helper.instantiateTemplate = function (template, targets, options) {
        var _this = this;
        options = options || {};
        var items;
        if (template.getAttribute('j-target-selector'))
            items = (options.container || document).querySelectorAll(template.getAttribute('j-target-selector'));
        else if (typeof targets == 'string')
            items = (options.container || document).querySelectorAll(targets);
        else if (targets instanceof NodeList)
            items = targets;
        else
            items = targets ? [targets] : undefined;
        var result = [];
        var position = (!items) ? exports.TemplateInstantiatePosition.auto : (template.getAttribute('j-target-position') || options.position || exports.TemplateInstantiatePosition.append);
        var processNode = function (topEl, el) {
            var doIt = true;
            if (options.preProcess) {
                doIt = options.preProcess.apply(_this, [topEl, el]);
                if (doIt !== false)
                    doIt = true;
            }
            if (doIt) {
                if (position == exports.TemplateInstantiatePosition.append)
                    el.appendChild(topEl);
                else if (position == exports.TemplateInstantiatePosition.insert) {
                    var firstChild = el.firstElementChild;
                    firstChild ? el.insertBefore(topEl, firstChild) : el.appendChild(topEl);
                }
                else if (position == exports.TemplateInstantiatePosition.auto) {
                    var parent = el.parentElement;
                    parent.insertBefore(topEl, el);
                }
                else {
                    Helper.hideElements(el, true);
                    el.parentElement.insertBefore(topEl, el);
                }
                options.postProcess && options.postProcess.apply(_this, [topEl, el]);
                result.push(topEl);
            }
        };
        if (position == exports.TemplateInstantiatePosition.auto) {
            var topEl = Helper.extractTemplate(template);
            processNode(topEl, template);
        }
        else {
            for (var i = 0; i < items.length; i++) {
                var el = items[i];
                var topEl = Helper.extractTemplate(template);
                processNode(topEl, el);
            }
        }
        return result;
    };
    Helper.locateTemplate = function (container, jtype, deep) {
        if (deep === void 0) { deep = false; }
        var getTemplate = function (el) {
            return el.querySelector("template[j-type=\"" + jtype + "\"]");
        };
        var foundTemplate = getTemplate(container);
        if (foundTemplate)
            return foundTemplate;
        if (deep) {
            var node = container.parentElement;
            while (node) {
                var found = getTemplate(node);
                if (found)
                    return found;
                node = node.parentElement;
            }
        }
        else
            return null;
    };
    Helper.removeTemplateInstances = function (container, templateId) {
        var templateList = Array.isArray(templateId) ? templateId : (typeof templateId == 'string' ? [templateId] : [templateId.getAttribute('j-type')]);
        for (var i = 0; i < templateList.length; i++) {
            var elements = container.querySelectorAll("[j-type=\"" + templateList[i] + "\"]:not(template)");
            this.removeElements(elements);
        }
    };
    Helper.hideTemplateInstances = function (container, templateId, hide) {
        var templateList = Array.isArray(templateId) ? templateId : [templateId];
        for (var i = 0; i < templateList.length; i++) {
            var elements = container.querySelectorAll("[j-type=\"" + templateList[i] + "\"]:not(template)");
            this.hideElements(elements, hide);
        }
    };
    Helper.hideElements = function (targets, hide) {
        var elements = targets instanceof NodeList ? targets : [targets];
        for (var i = 0; i < elements.length; i++) {
            var el = elements[i];
            hide ? (el.style.display = 'none') : (el.style.display = '');
        }
    };
    Helper.removeElements = function (targets) {
        var elements = targets instanceof NodeList ? targets : [targets];
        for (var i = 0; i < elements.length; i++) {
            elements[i].remove();
        }
    };
    Helper.getElementsNotIn = function (container, selector, excludeContainerSelector) {
        var allItems = container.querySelectorAll(selector);
        var notIncludingContainerItems = container.querySelectorAll(excludeContainerSelector);
        var excludedItemList = [];
        for (var i = 0; i < notIncludingContainerItems.length; i++) {
            var subContainer = notIncludingContainerItems[i];
            var notToIncludeItems = subContainer.querySelectorAll(selector);
            for (var j = 0; j < notToIncludeItems.length; j++) {
                excludedItemList.push(notToIncludeItems[j]);
            }
        }
        var foundItems = [];
        for (var i = 0; i < allItems.length; i++) {
            var found = false;
            for (var j = 0; j < excludedItemList.length; j++) {
                if (allItems[i] === excludedItemList[j])
                    found = true;
            }
            if (!found)
                foundItems.push(allItems[i]);
        }
        return foundItems;
    };
    Helper.getContainingType = function (el, jtype) {
        var node = el.parentElement;
        while (node) {
            var found = node.getAttribute('j-type') == jtype;
            if (found)
                return node;
            node = node.parentElement;
        }
        return null;
    };
    Helper.makeid = function () {
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        for (var i = 0; i < 8; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));
        return text;
    };
    Helper.fireEvent = function (source, name, detail, cancellable, canBubble) {
        if (detail === void 0) { detail = null; }
        if (cancellable === void 0) { cancellable = false; }
        if (canBubble === void 0) { canBubble = false; }
        var createdEvent = new CustomEvent('Event');
        createdEvent.initCustomEvent(name, canBubble, cancellable, detail);
        return source.dispatchEvent(createdEvent);
    };
    Helper.extends = function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    ;
    Helper.inherit = function (base) {
        var generatedClass = (function (_parent) {
            Helper.extends(generatedClass, _parent);
            function generatedClass() {
                return _parent.apply(this, arguments) || this;
            }
            return generatedClass;
        }(base));
        return generatedClass;
    };
    return Helper;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Helper;

},{}],33:[function(require,module,exports){
"use strict";
var dashboard_1 = require("./dashboard");
var axios = require("axios");
var theme_1 = require("./theme");
var dashlet_1 = require("./dashboard/dashlet");
var localstorage_1 = require("./provider/localstorage");
var api_1 = require("./provider/api");
var dashletpanel_1 = require("./dashboard/dashletpanel");
var dashleteditorpanel_1 = require("./dashboard/dashleteditorpanel");
var core_1 = require("./core");
var core_2 = require("./core");
var grid_1 = require("./layout/grid");
var generic_1 = require("./layout/generic");
var layout_1 = require("./layout");
var helper_1 = require("./helper");
var register_1 = require("./register");
exports.JDash = {
    HtmlElement: core_2.HtmlElement,
    Helper: helper_1.default,
    Component: core_1.Component,
    DashletModule: dashlet_1.DashletModule,
    DashletPanel: dashletpanel_1.DashletPanel,
    DashletEditorPanel: dashleteditorpanel_1.DashletEditorPanel,
    LocalStorageProvider: localstorage_1.LocalStorageProvider,
    GenericLayout: generic_1.GenericLayout,
    GridLayout: grid_1.GridLayout,
    DashboardLayout: layout_1.DashboardLayout,
    Configuration: core_2.Configuration,
    ThemeManager: theme_1.ThemeManager,
    Dashboard: dashboard_1.Dashboard,
    Http: axios,
    Provider: new api_1.ApiProvider(),
    dashlet: function (id, handler) {
        var args = Array.prototype.slice.call(arguments);
        exports.JDash.define.apply(this, args);
    },
    define: function (id, handler) {
        var args = Array.prototype.slice.apply(arguments);
        return core_1.Component.define.apply(core_1.Component, args);
    },
    ready: function (fn) {
        window.customElements.flush && window.customElements.flush();
        if (document.readyState != 'loading')
            fn();
        else
            document.addEventListener('DOMContentLoaded', function () {
                if (window['HTMLImports'])
                    window['HTMLImports']['whenReady'](function () { return setTimeout(function () {
                        fn();
                    }); });
                else
                    fn();
            });
    }
};
(function (window) {
    window['jdash'] = exports.JDash;
    register_1.default.elements();
    exports.JDash.ready(function () { return theme_1.ThemeManager.init(); });
})(window);

},{"./core":27,"./dashboard":31,"./dashboard/dashlet":28,"./dashboard/dashleteditorpanel":29,"./dashboard/dashletpanel":30,"./helper":32,"./layout":36,"./layout/generic":34,"./layout/grid":35,"./provider/api":37,"./provider/localstorage":39,"./register":40,"./theme":41,"axios":1}],34:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var _1 = require("./");
var GenericLayout = (function (_super) {
    __extends(GenericLayout, _super);
    function GenericLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GenericLayout;
}(_1.DashboardLayout));
exports.GenericLayout = GenericLayout;

},{"./":36}],35:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("../core");
var _1 = require("./");
var GridLayout = (function (_super) {
    __extends(GridLayout, _super);
    function GridLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridLayout.prototype.getStyles = function () {
        return {
            dark: 'Dark',
            light: 'Light'
        };
    };
    GridLayout.prototype.setColumnWidths4Zones = function (zoneElements) {
        var totalWeigth = 0, zoneCount = zoneElements.length;
        for (var i = 0; i < zoneElements.length; i++) {
            var zone = zoneElements[i];
            var weight = parseInt(zone.getAttribute('j-weight') || "1") || 1;
            totalWeigth += weight;
        }
        var weightEffect = 12.0 / totalWeigth, zoneValue = 12 / zoneCount;
        var zoneWidthCount = 0;
        for (var i = 0; i < zoneElements.length; i++) {
            var zone = zoneElements[i];
            var weight = parseInt(zone.getAttribute('j-weight') || "1") || 1;
            var zoneWidth = Math.round(weight * weightEffect);
            if (i == zoneElements.length - 1)
                zoneWidth = Math.abs(12 - zoneWidthCount);
            else
                zoneWidthCount += zoneWidth;
            zone.setAttribute('class', '');
            zone.classList.add("j-col", "m" + zoneWidth);
        }
    };
    GridLayout.prototype.setColumnWidths = function () {
        var sections = this.querySelectorAll('[j-type="j-layout-section"]');
        if (sections.length == 0)
            this.setColumnWidths4Zones(this.querySelectorAll('[j-dashlet-zone]'));
        else {
            for (var i = 0; i < sections.length; i++) {
                var zones = sections[i].querySelectorAll('[j-dashlet-zone]');
                this.setColumnWidths4Zones(zones);
            }
        }
    };
    GridLayout.prototype.createChildren = function (parent) {
        _super.prototype.createChildren.call(this, parent);
    };
    GridLayout.prototype.connectedCallback = function () {
        _super.prototype.connectedCallback.call(this);
    };
    return GridLayout;
}(_1.DashboardLayout));
exports.GridLayout = GridLayout;
core_1.Component.define('j-grid-layout', {
    elementClass: GridLayout
});

},{"../core":27,"./":36}],36:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var dashboard_1 = require("../dashboard");
var dashlet_1 = require("../dashboard/dashlet");
var core_1 = require("./../core");
var helper_1 = require("../helper");
var helper_2 = require("../helper");
function dragMoveListener(event) {
    var target = event.target, x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx, y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;
    var body = document.body.getBoundingClientRect();
    var dy = (Math.round(body.height) - window.screen.height, 0);
    var dx = (Math.round(body.width) - window.screen.width, 0);
    target.style.webkitTransform =
        target.style.transform =
            'translate(' + (x + dx) + 'px, ' + (y + dy) + 'px)';
    target.setAttribute('data-x', x + dx);
    target.setAttribute('data-y', y + dy);
}
function getAbsoluteBoundingRect(el) {
    var doc = document, win = window, body = doc.body, offsetX = win.pageXOffset !== undefined ? win.pageXOffset :
        (doc.documentElement || body.parentNode || body)['scrollLeft'], offsetY = win.pageYOffset !== undefined ? win.pageYOffset :
        (doc.documentElement || body.parentNode || body)['scrollTop'], rect = el.getBoundingClientRect();
    if (el !== body) {
        var parent = el.parentNode;
        while (parent !== body) {
            offsetX += parent.scrollLeft;
            offsetY += parent.scrollTop;
            parent = parent.parentNode;
        }
    }
    return {
        bottom: rect.bottom + offsetY,
        height: rect.height,
        left: rect.left + offsetX,
        right: rect.right + offsetX,
        top: rect.top + offsetY,
        width: rect.width
    };
}
exports.LayoutViewMode = {
    readonly: 'readonly',
    layoutedit: 'layoutedit',
    dashletedit: 'dashletedit',
    editable: 'editable'
};
var DashboardLayout = (function (_super) {
    __extends(DashboardLayout, _super);
    function DashboardLayout() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._viewMode = exports.LayoutViewMode.readonly;
        _this.discardedAttributesOnClone = {
            'j-type': ['j-dashlet-panel', 'j-dashlet', 'j-zone-editor', 'j-section-editor', 'j-dashlet-zone-group-editor']
        };
        return _this;
    }
    DashboardLayout.prototype.init = function () {
        var content = this.querySelector('template[j-type="j-layout-content"]');
        var sections = content.querySelectorAll('[j-type="j-layout-section"]');
        var model = {
            sections: []
        };
        for (var index = 0; index < sections.length; index++) {
            var section = sections[index];
            var titleNode = section.querySelector('[j-type="j-layout-section-title"]');
            var title = (titleNode && titleNode.innerHTML) || '';
            var dashletZones = helper_1.default.getElementsNotIn(section, '[j-dashlet-zone]', '[j-dashlet-zone]');
            model.sections.push({
                title: title
            });
        }
    };
    DashboardLayout.prototype.getType = function () {
        return 'j-layout';
    };
    DashboardLayout.prototype.getStyles = function () {
        return {};
    };
    Object.defineProperty(DashboardLayout.prototype, "layoutStyle", {
        get: function () {
            return this._layoutStyle;
        },
        set: function (value) {
            if (this._layoutStyle)
                this.classList.remove(this._layoutStyle);
            var styles = this.getStyles();
            if (styles) {
                this.classList.add(value);
                this._layoutStyle = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    DashboardLayout.prototype.getModel = function () {
        var content = this.querySelector('[j-type="j-layout-content"]:not(template)');
        var clone = helper_1.default.cloneElement(content, true, undefined, { 'j-persist': '' });
        var dashlets = this.getDashlets();
        var dashletData = {};
        for (var i = 0; i < dashlets.length; i++) {
            var dashlet = dashlets[i];
            var dashletId = dashlet.getAttribute('j-provider-id') || dashlet.id;
            dashletId && (dashletData[dashletId] = {
                position: this.getElementPosition(dashlet)
            });
        }
        var model = {
            moduleId: this.tagName.toLowerCase(),
            dashlets: dashletData,
            config: {
                content: clone.outerHTML
            }
        };
        return model;
    };
    DashboardLayout.prototype.removeZoneActionHandler = function (event) {
        var zone = event.detail.zone, parent = zone.parentElement;
        var containingGroup = helper_1.default.getContainingType(zone, 'j-dashlet-zone-group');
        var immidiateSiblings = helper_1.default.getImmidiateSiblings(zone, '[j-dashlet-zone]', false);
        zone.remove();
        if (containingGroup && !immidiateSiblings.length) {
            containingGroup.remove();
        }
        this.setColumnWidths4Zones(immidiateSiblings);
    };
    DashboardLayout.prototype.moveSectionActionHandler = function (event) {
        var direction = event.detail.direction || 'next';
        var section = event.detail.section;
        helper_1.default.moveElement(section, direction, '[j-type="j-layout-section"]');
    };
    DashboardLayout.prototype.cloneZoneActionHandler = function (event) {
        var zone = event.detail.zone;
        var clone = helper_1.default.cloneElement(zone, true, this.discardedAttributesOnClone);
        clone.setAttribute('j-dashlet-zone', helper_1.default.makeid());
        zone.parentElement.insertBefore(clone, zone);
        this.setLayoutMode4Zone(clone);
        var zones = helper_1.default.getImmidiateSiblings(zone, "[j-dashlet-zone]", false);
        this.setColumnWidths4Zones(Array.prototype.concat.apply(zones, [zone]));
    };
    DashboardLayout.prototype.editSectionTitle = function (section, header) {
        var titleNodes = section.querySelectorAll('[j-type="j-layout-section-title"]');
        if (titleNodes.length > 0) {
            var title = titleNodes[0].textContent;
            var newTitle = window.prompt(header || 'Title', title);
            if (newTitle != null) {
                for (var i = 0; i < titleNodes.length; i++)
                    titleNodes[i].textContent = newTitle;
                return newTitle;
            }
            return null;
        }
        return undefined;
    };
    DashboardLayout.prototype.editSectionTitleActionHandler = function (event) {
        this.editSectionTitle(event.detail.section, 'Set section title');
    };
    DashboardLayout.prototype.removeSectionActionHandler = function (event) {
        var section = event.detail.section;
        section.remove();
    };
    DashboardLayout.prototype.editzoneGroupTitle = function (container, header) {
        var titleNodes = container.querySelectorAll('[j-type="j-dashlet-zone-group-title"]');
        if (titleNodes.length > 0) {
            var title = titleNodes[0].textContent.trim();
            var newTitle = window.prompt(header || 'Title', title);
            if (newTitle != null) {
                for (var i = 0; i < titleNodes.length; i++)
                    titleNodes[i].textContent = newTitle;
                return newTitle;
            }
            return null;
        }
        return undefined;
    };
    DashboardLayout.prototype.moveZoneGroupActionHandler = function (event) {
        var direction = event.detail.direction, group = event.detail.group;
        helper_1.default.moveElement(group, direction, '[j-type="j-dashlet-zone-group"]');
    };
    DashboardLayout.prototype.cloneZoneGroupActionHandler = function (event) {
        var group = event.detail.group;
        var newGroup = helper_1.default.cloneElement(group, true, this.discardedAttributesOnClone);
        var zones = newGroup.querySelectorAll('[j-dashlet-zone]');
        for (var i = 0; i < zones.length; i++) {
            zones[i].setAttribute('j-dashlet-zone', helper_1.default.makeid());
            this.setLayoutMode4Zone(zones[i]);
        }
        this.setLayoutMode4ZoneGroup(newGroup);
        var titleRes = this.editzoneGroupTitle(newGroup, 'Set a title for new group');
        if (titleRes === null)
            return;
        group.parentElement.insertBefore(newGroup, group);
    };
    DashboardLayout.prototype.editZoneGroupTitleActionHandler = function (event) {
        this.editzoneGroupTitle(event.detail.group, 'Set group title');
    };
    DashboardLayout.prototype.removeZoneGroupActionHandler = function (event) {
        var group = event.detail.group;
        group.remove();
    };
    DashboardLayout.prototype.makeZoneGroupActionHandler = function (event) {
        var _this = this;
        var zone = event.detail.zone;
        var template = helper_1.default.locateTemplate(this, 'j-dashlet-zone-group');
        if (template) {
            helper_1.default.instantiateTemplate(template, zone, {
                position: helper_2.TemplateInstantiatePosition.append,
                postProcess: function (clone) {
                    var zones = clone.querySelectorAll('[j-dashlet-zone]');
                    for (var i = 0; i < zones.length; i++) {
                        zones[i].setAttribute('j-dashlet-zone', helper_1.default.makeid());
                        _this.setLayoutMode4Zone(zones[i]);
                    }
                    _this.setLayoutMode4ZoneGroup(clone);
                    _this.setColumnWidths4Zones(zones);
                }
            });
        }
    };
    DashboardLayout.prototype.cloneSectionActionHandler = function (event) {
        var section = event.detail.section;
        var newSection = helper_1.default.cloneElement(section, true, this.discardedAttributesOnClone);
        var zones = newSection.querySelectorAll('[j-dashlet-zone]');
        for (var i = 0; i < zones.length; i++) {
            zones[i].setAttribute('j-dashlet-zone', helper_1.default.makeid());
            this.setLayoutMode4Zone(zones[i]);
        }
        this.setLayoutMode4Section(newSection);
        var titleRes = this.editSectionTitle(newSection, 'Set a title for new section');
        if (titleRes === null)
            return;
        section.parentElement.insertBefore(newSection, section);
    };
    DashboardLayout.prototype.resetSectionActionHandler = function (event) {
        var section = event.detail.section;
        var zones = section.querySelectorAll('[j-dashlet-zone]');
        for (var i = 0; i < zones.length; i++) {
            zones[i].removeAttribute('j-weight');
        }
        this.setColumnWidths4Zones(zones);
    };
    DashboardLayout.prototype.moveZoneActionHandler = function (event) {
        var direction = event.detail.direction, zone = event.detail.zone;
        helper_1.default.moveElement(zone, direction, '[j-dashlet-zone]');
    };
    DashboardLayout.prototype.setColumnWidths4Zones = function (zoneElements) {
    };
    DashboardLayout.prototype.setColumnWidths = function () {
    };
    DashboardLayout.prototype.getElementWeigth = function (el) {
        if (el.hasAttribute('j-weight')) {
            var existing = Number(el.getAttribute('j-weight'));
            return existing || 1;
        }
        else
            return 1;
    };
    DashboardLayout.prototype.changeElementWeigth = function (el, delta, max) {
        var weigth = this.getElementWeigth(el);
        if (weigth >= max)
            return;
        var expected = weigth + delta;
        if (expected == 0 && delta > 0)
            expected = 2;
        else if (expected < 1 && delta < 0)
            expected = 1;
        el.setAttribute('j-weight', (expected).toString());
    };
    DashboardLayout.prototype.changeElementWeigths = function (els, delta, max) {
        for (var i = 0; i < els.length; i++) {
            this.changeElementWeigth(els[i], delta, max);
        }
    };
    DashboardLayout.prototype.resizeZoneActionHandler = function (event) {
        var incSize = Number(event.detail.inc), zone = event.detail.zone;
        var zones = helper_1.default.getImmidiateSiblings(zone, "[j-dashlet-zone]", false);
        var maxWeight = 12 - (zones.length - 1);
        if (incSize > 0) {
            var elWeight = this.getElementWeigth(zone);
            if (elWeight >= maxWeight)
                this.changeElementWeigths(zones, -1, maxWeight);
            else
                this.changeElementWeigth(zone, 1, maxWeight);
        }
        else {
            this.changeElementWeigths(zones, 1, maxWeight);
        }
        this.setColumnWidths4Zones(Array.prototype.concat.apply(zones, [zone]));
    };
    DashboardLayout.prototype.getDashlets = function () {
        var elements = this.querySelectorAll('[j-type="j-dashlet"]');
        return elements;
    };
    DashboardLayout.prototype.makeDashletsDragable = function (enable) {
        var dashlets = this.getDashlets();
        for (var i = 0; i < dashlets.length; i++)
            this.makeDashletDragable(dashlets[i], enable);
    };
    DashboardLayout.prototype.hideDashlets = function (hide) {
        var panels = this.querySelectorAll('[j-type="j-dashlet-panel"]');
        helper_1.default.hideElements(panels, hide);
        hide ? (this.dashletsHidden = true) : (this.dashletsHidden = false);
    };
    DashboardLayout.prototype.toggleDashlets = function () {
        this.hideDashlets(!this.dashletsHidden);
    };
    DashboardLayout.prototype.collapseDashlet = function (dashlet, collapse) {
        var configureTools = this.querySelectorAll('[j-type="j-dashlet-configuration-tools"]');
        if (this.viewMode == 'dashletedit')
            helper_1.default.hideElements(configureTools, collapse);
        helper_1.default.hideElements(dashlet, collapse);
    };
    DashboardLayout.prototype.collapseDashlets = function (collapse) {
        var dashlets = this.getDashlets();
        for (var i = 0; i < dashlets.length; i++)
            this.collapseDashlet(dashlets[i], collapse);
        this.dashletsCollapsed = collapse;
    };
    DashboardLayout.prototype.toggleCollapseDashlets = function () {
        this.collapseDashlets(!this.dashletsCollapsed);
    };
    Object.defineProperty(DashboardLayout.prototype, "viewMode", {
        get: function () {
            return this._viewMode;
        },
        set: function (newVal) {
            if (this.viewMode != newVal) {
                this.fireEvent('viewmode-change', {
                    oldVal: this.viewMode,
                    newVal: newVal
                }, false, true);
                this._viewMode = newVal;
                if (this.isInitialized)
                    this.setViewMode(newVal);
            }
        },
        enumerable: true,
        configurable: true
    });
    DashboardLayout.prototype.setViewMode = function (newVal) {
        this.clearDropZones('j-dashlet');
        this.setAttribute('j-view-mode', newVal);
        switch (newVal) {
            case exports.LayoutViewMode.readonly: {
                this.setLayoutEditMode(false);
                this.setDashletEditMode(false);
                break;
            }
            case exports.LayoutViewMode.layoutedit: {
                this.setDashletEditMode(false);
                this.setLayoutEditMode(true);
                break;
            }
            case exports.LayoutViewMode.dashletedit: {
                this.setLayoutEditMode(false);
                this.setDashletEditMode(true);
                break;
            }
        }
    };
    DashboardLayout.prototype.initializeElement = function () {
        var styles = this.getStyles(), style = null;
        if (!this.layoutStyle) {
            Object.keys(styles).forEach(function (k) {
                style = style || k;
            });
        }
        style && (this.layoutStyle = style);
        _super.prototype.initializeElement.call(this);
        interact.dynamicDrop(true);
        this.listenforActions();
        helper_1.default.ensureId(this, 'j-dashlet-zone');
        this.setViewMode(this.viewMode);
    };
    DashboardLayout.prototype.setDashletViewMode = function (newMode, targets) {
        var dashlets = targets instanceof NodeList ? targets : [targets];
        for (var i = 0; i < dashlets.length; i++) {
            var dashlet = dashlets[i];
            dashlet.setAttribute('j-view-mode', newMode);
        }
    };
    DashboardLayout.prototype.setDashletEditMode = function (edit) {
        if (edit) {
            this.createDashletDropzones();
            this.makeZonesDroppable(true);
            this.makeDashletsDragable(true);
            this.setDashletViewMode(dashlet_1.DashletViewMode.configure, this.getDashlets());
        }
        else {
            this.makeDashletsDragable(false);
            this.makeZonesDroppable(false);
            this.clearDropZones('j-dashlet');
            this.setDashletViewMode(dashlet_1.DashletViewMode.readonly, this.getDashlets());
        }
    };
    DashboardLayout.prototype.setLayoutMode4Zone = function (targets) {
        var _this = this;
        var zoneEditTemplate = helper_1.default.locateTemplate(this, 'j-zone-editor', true);
        zoneEditTemplate && helper_1.default.instantiateTemplate(zoneEditTemplate, targets, {
            position: helper_2.TemplateInstantiatePosition.insert,
            preProcess: function (clone, el) {
                helper_1.default.bindActions(clone, {
                    'zone': el
                }, _this);
            }
        });
    };
    DashboardLayout.prototype.setLayoutMode4Section = function (container) {
        var _this = this;
        var sectionEditTemplate = helper_1.default.locateTemplate(this, 'j-section-editor', true);
        var items = container.querySelectorAll('[j-type="j-layout-section-header"]');
        sectionEditTemplate && helper_1.default.instantiateTemplate(sectionEditTemplate, items, {
            position: helper_2.TemplateInstantiatePosition.sibling,
            preProcess: function (clone, el) {
                helper_1.default.bindActions(clone, {
                    'section': helper_1.default.getContainingType(el, 'j-layout-section')
                }, _this);
                var headerTitle = el.querySelector('[j-type="j-layout-section-title"]');
                if (headerTitle) {
                    var templateHeaderTitle = clone.querySelector('[j-type="j-layout-section-title"]');
                    templateHeaderTitle && (templateHeaderTitle.innerHTML = headerTitle.innerHTML);
                }
            }
        });
    };
    DashboardLayout.prototype.setLayoutMode4ZoneGroup = function (container) {
        var _this = this;
        var sectionEditTemplate = helper_1.default.locateTemplate(this, 'j-dashlet-zone-group-editor', true);
        var items = container.querySelectorAll('[j-type="j-dashlet-zone-group-header"]');
        sectionEditTemplate && helper_1.default.instantiateTemplate(sectionEditTemplate, items, {
            position: helper_2.TemplateInstantiatePosition.sibling,
            preProcess: function (clone, el) {
                helper_1.default.bindActions(clone, {
                    'group': helper_1.default.getContainingType(el, 'j-dashlet-zone-group')
                }, _this);
                var headerTitle = el.querySelector('[j-type="j-dashlet-zone-group-title"]');
                if (headerTitle) {
                    var templateHeaderTitle = clone.querySelector('[j-type="j-dashlet-zone-group-title"]');
                    templateHeaderTitle && (templateHeaderTitle.innerHTML = headerTitle.innerHTML);
                }
            }
        });
    };
    DashboardLayout.prototype.load = function (model, dashlets) {
        var _this = this;
        if (model.config && model.config["content"]) {
            this.generateLayoutContent(model.config && model.config['content']);
        }
        else {
            this.reset();
        }
        dashlets.forEach(function (dashletModel) {
            var dashlet = _this.generateDashletElement(dashletModel, dashlet_1.IDashletElementStatus.loaded);
            _this.placeDashlet(dashlet, model.dashlets && model.dashlets[dashletModel.id] && model.dashlets[dashletModel.id].position);
        });
    };
    DashboardLayout.prototype.save = function () {
        var layoutData = this.getModel();
        var dashboardId = this.dashboard.getAttribute('j-provider-id') || this.dashboard.id;
        return this.dashboard.provider.saveDashboard(dashboardId, { layout: layoutData });
    };
    DashboardLayout.prototype.setLayoutEditMode = function (edit) {
        if (!edit) {
            helper_1.default.removeTemplateInstances(this, ['j-zone-editor', 'j-section-editor', 'j-dashlet-zone-group-editor']);
            helper_1.default.hideElements(this.querySelectorAll('[j-type="j-layout-section-header"]'), false);
            helper_1.default.hideElements(this.querySelectorAll('[j-type="j-dashlet-zone-group-header"]'), false);
            if (this._dashletsCollapsedByLayout) {
                this.collapseDashlets(false);
                delete this._dashletsCollapsedByLayout;
            }
        }
        else {
            if (!this.dashletsCollapsed) {
                this.collapseDashlets(true);
                this._dashletsCollapsedByLayout = true;
            }
            var dashletZones = this.querySelectorAll('[j-dashlet-zone]');
            this.setLayoutMode4Zone(this.querySelectorAll('[j-dashlet-zone]'));
            this.setLayoutMode4Section(this);
            this.setLayoutMode4ZoneGroup(this);
        }
    };
    DashboardLayout.prototype.generateDashletElement = function (model, status) {
        var dashletModule = dashlet_1.DashletModule.getByTag(model.moduleId);
        dashletModule = dashletModule || dashlet_1.DashletModule.createModule(model.moduleId);
        var dashlet = document.createElement(dashletModule.elementTag);
        dashlet.model = model;
        dashlet.status = status;
        return dashlet;
    };
    DashboardLayout.prototype.attributeChangedCallback = function (name, oldVal, newVal) {
        _super.prototype.attributeChangedCallback.call(this, name, oldVal, newVal);
    };
    DashboardLayout.prototype.createDropzoneElement = function (instance) {
        var dropzoneTemplate = helper_1.default.locateTemplate(this, 'j-dropzone', true);
        var dropZoneEl = helper_1.default.extractTemplate(dropzoneTemplate);
        instance && dropZoneEl.setAttribute('j-instance', instance);
        return dropZoneEl;
    };
    DashboardLayout.prototype.dropActiveForElement = function (el) {
        var rect = getAbsoluteBoundingRect(el);
        if (typeof el['__originalPosition'] == 'undefined') {
            el['__originalPosition'] = el.style.position;
            el.style.position = 'absolute';
            el.style.left = Math.round(rect.left) + "px";
            el.style.top = Math.round(rect.top) + "px";
            el.style.width = Math.round(rect.width) + "px";
            el.style.height = Math.round(rect.height) + "px";
        }
    };
    DashboardLayout.prototype.dropEndForElement = function (el) {
        el.style.webkitTransform = el.style.transform = '';
        el.removeAttribute('data-x');
        el.removeAttribute('data-y');
        el.style.position = el['__originalPosition'] || '';
        el.style.left = "";
        el.style.top = "";
        el.style.width = "";
        el.style.height = "";
        delete el['__originalPosition'];
    };
    DashboardLayout.prototype.makeZonesDroppable = function (enable) {
        var self = this;
        var _interactable = interact('[j-type="j-dropzone"][j-instance="j-dashlet"]:not(template)', {
            context: this
        });
        if (enable) {
            _interactable.dropzone({
                accept: '[j-type="j-dashlet-panel"],[j-type="j-dashlet-module"]',
                checker: function (dragEvent, event, dropped, dropzone, dropElement, draggable, draggableElement) {
                    if (dropped) {
                    }
                    return dropped;
                },
                ondropactivate: function (event) {
                    var el = event.relatedTarget, zone = event.target, dashlet = el.querySelector('[j-type="j-dashlet"]'), dashletModule = el.querySelector('[j-type="j-dashlet-module"]');
                    zone.classList.add('j-dropzone-active');
                    self.dropActiveForElement(el);
                    dashlet && self.createDashletDropzones([dashlet]);
                },
                ondragenter: function (event) {
                    var el = event.relatedTarget, zone = event.target, dashlet = el.querySelector('[j-type="j-dashlet"]'), dashletModule = el.querySelector('[j-type="j-dashlet-module"]');
                    zone.classList.add('j-dropzone-enter');
                    el.classList.add('j-can-drop');
                    var rect = el.getBoundingClientRect();
                    zone.style.height = Math.round(rect.height) + "px";
                },
                ondragleave: function (event) {
                    var el = event.relatedTarget, zone = event.target, dashlet = el.querySelector('[j-type="j-dashlet"]'), dashletModule = el.querySelector('[j-type="j-dashlet-module"]');
                    zone.classList.remove('j-dropzone-enter');
                    zone.style.height = '';
                    el.classList.remove('j-can-drop');
                },
                ondrop: function (event) {
                    var el = event.relatedTarget, zone = event.target, dashlet = el.querySelector('[j-type="j-dashlet"]'), dashletModule = el.querySelector('[j-type="j-dashlet-module"]');
                    el.classList.remove('j-can-drop');
                    self.dropEndForElement(el);
                    var newPos = self.getElementPosition(zone);
                    if (dashlet) {
                        self.placeDashlet(dashlet, newPos);
                    }
                    else if (el.getAttribute('j-type') == 'j-dashlet-module') {
                        var model = {
                            id: '',
                            moduleId: el.getAttribute('j-module-id'),
                            dashboardId: self.dashboard.getAttribute('j-provider-id') || self.dashboard.id,
                            title: '',
                            configuration: {},
                            createdAt: null
                        };
                        self.dashboard.addDashlet(el.getAttribute('j-module-id'), newPos);
                    }
                },
                ondropdeactivate: function (event) {
                    var el = event.relatedTarget, zone = event.target, dashlet = el.querySelector('[j-type="j-dashlet"]');
                    zone.classList.remove('drop-active');
                    zone.classList.remove('drop-target');
                }
            });
        }
        else {
        }
    };
    DashboardLayout.prototype.makeDashletDragable = function (dashletElement, enable) {
        var selector = dashletElement.panel ? '[j-type="j-dashlet-panel"]' : '[j-type="j-dashlet"]';
        var interactable = interact(selector, {
            context: dashletElement.panel || dashletElement
        });
        var self = this;
        if (enable) {
            interactable.draggable({
                inertia: true,
                restrict: {
                    endOnly: true,
                    elementRect: { top: 1, left: 1, bottom: 1, right: 1 },
                },
                autoScroll: true,
                onmove: function (event) {
                    dragMoveListener.apply(this, [event]);
                },
                onend: function (event) {
                    var zone = event['dropzone'];
                    if (!zone) {
                        var el = event.target;
                        self.dropEndForElement(el);
                        var dashlet = event.target.querySelector('[j-type="j-dashlet"]');
                        var pos = self.getElementPosition(dashlet);
                        self.placeDashlet(dashlet, pos);
                    }
                }
            }).allowFrom('[j-drag-handle]');
        }
        else {
            interactable.draggable(false);
        }
    };
    DashboardLayout.prototype.createDashletDropzones = function (excludeList) {
        if (excludeList === void 0) { excludeList = []; }
        var zones = this.querySelectorAll("[j-dashlet-zone]");
        this.clearDropZones('j-dashlet');
        for (var i = 0; i < zones.length; i++) {
            var zone = zones[i];
            var dashlets = zone.querySelectorAll('[j-type="j-dashlet"]');
            for (var j = 0; j < dashlets.length; j++) {
                if (excludeList.indexOf(dashlets[j]) >= 0)
                    continue;
                var dashlet = dashlets[j];
                if (dashlet.panel.parentElement != zone)
                    continue;
                var dropZoneEl = this.createDropzoneElement('j-dashlet');
                zone.insertBefore(dropZoneEl, dashlet.panel);
            }
            var dropZoneEl = this.createDropzoneElement('j-dashlet');
            var zoneId = zone.getAttribute('j-dashlet-zone');
            zone.appendChild(dropZoneEl);
            this.autoArrangeElements(zoneId, 'j-dropzone');
        }
    };
    DashboardLayout.prototype.clearDropZones = function (instance) {
        var zones = instance ? this.querySelectorAll("[j-type=\"j-dropzone\"][j-instance=\"" + instance + "\"]:not(template)") : this.querySelectorAll('[j-type="j-dropzone"]:not(template)');
        for (var i = 0; i < zones.length; i++) {
            var zone = zones[i];
            zone.remove();
        }
    };
    DashboardLayout.prototype.generateLayoutContent = function (newContent) {
        var contentTemplate = helper_1.default.locateTemplate(this, 'j-layout-content', false);
        if (newContent) {
            helper_1.default.removeTemplateInstances(this, 'j-layout-content');
            var template = document.createElement('template');
            template.innerHTML = newContent;
            template.setAttribute('j-type', 'j-layout-content');
            var content = helper_1.default.extractTemplate(template);
            this.insertBefore(content, contentTemplate);
        }
        else {
            helper_1.default.instantiateTemplate(contentTemplate);
        }
    };
    DashboardLayout.prototype.createChildren = function (parent) {
        _super.prototype.createChildren.call(this, parent);
        this.generateLayoutContent();
        this.setColumnWidths();
    };
    DashboardLayout.prototype.listenforActions = function () {
        helper_1.default.addActionListener('removezone', this.removeZoneActionHandler.bind(this), this);
        helper_1.default.addActionListener('movesection', this.moveSectionActionHandler.bind(this), this);
        helper_1.default.addActionListener('movezone', this.moveZoneActionHandler.bind(this), this);
        helper_1.default.addActionListener('resizezone', this.resizeZoneActionHandler.bind(this), this);
        helper_1.default.addActionListener('clonezone', this.cloneZoneActionHandler.bind(this), this);
        helper_1.default.addActionListener('clonesection', this.cloneSectionActionHandler.bind(this), this);
        helper_1.default.addActionListener('editsectiontitle', this.editSectionTitleActionHandler.bind(this), this);
        helper_1.default.addActionListener('removesection', this.removeSectionActionHandler.bind(this), this);
        helper_1.default.addActionListener('makezonegroup', this.makeZoneGroupActionHandler.bind(this), this);
        helper_1.default.addActionListener('movezonegroup', this.moveZoneGroupActionHandler.bind(this), this);
        helper_1.default.addActionListener('clonezonegroup', this.cloneZoneGroupActionHandler.bind(this), this);
        helper_1.default.addActionListener('editzonegrouptitle', this.editZoneGroupTitleActionHandler.bind(this), this);
        helper_1.default.addActionListener('removezonegroup', this.removeZoneGroupActionHandler.bind(this), this);
        helper_1.default.addActionListener('resetsection', this.resetSectionActionHandler.bind(this), this);
    };
    DashboardLayout.prototype.connectedCallback = function () {
        _super.prototype.connectedCallback.call(this);
    };
    DashboardLayout.prototype.makeDroppable = function (selector, enable, context, container) {
        var interactable = interact(selector, {
            context: context
        });
        var self = this;
        if (enable) {
            interactable.draggable({
                inertia: true,
                restrict: {
                    endOnly: true,
                    elementRect: { top: 1, left: 1, bottom: 1, right: 1 },
                },
                autoScroll: {
                    container: this
                },
                onstart: function (event) {
                    setTimeout(function () {
                        event.target.style.left = (event.pageX - 25) + "px";
                    });
                },
                onmove: function (event) {
                    dragMoveListener.apply(this, [event]);
                },
                onend: function (event) {
                    self.dropEndForElement(event.target);
                    var zone = event['dropzone'];
                    if (!zone) {
                        var el = event.target;
                        el.style.webkitTransform = el.style.transform = '';
                        el.removeAttribute('data-x');
                        el.removeAttribute('data-y');
                    }
                }
            }).allowFrom('[j-drag-handle]');
        }
        else {
            interactable.draggable(false);
        }
    };
    DashboardLayout.prototype.setDashletProperties = function (dashletElement) {
        if ([exports.LayoutViewMode.editable, exports.LayoutViewMode.dashletedit].indexOf(this.viewMode) >= 0) {
            this.makeDashletDragable(dashletElement, true);
            this.setDashletViewMode(dashlet_1.DashletViewMode.configure, dashletElement);
        }
        else {
            this.makeDashletDragable(dashletElement, false);
            this.setDashletViewMode(dashlet_1.DashletViewMode.readonly, dashletElement);
        }
        dashletElement.config = dashletElement.config || {};
    };
    DashboardLayout.prototype.createPanelForDashlet = function (dashletElement) {
        var panelTag = dashletElement.getAttribute('j-panel') || 'j-dashlet-panel';
        if (panelTag && panelTag != 'none') {
            var panel = document.createElement(panelTag);
            panel.setAttribute('j-type', 'j-dashlet-panel');
            panel.dashlet = dashletElement;
            return panel;
        }
        else {
            var el = document.createElement('div');
            el.setAttribute('j-type', 'j-dashlet-panel');
            el['dashlet'] = dashletElement;
            el.appendChild(dashletElement);
            return el;
        }
    };
    DashboardLayout.prototype.normalizePosition = function (pos) {
        pos = pos || {};
        var zoneEl, dashletsInZone = 0;
        if (!pos.zone) {
            zoneEl = this.querySelector('[j-dashlet-zone]');
            zoneEl && (pos.zone = zoneEl.getAttribute('j-dashlet-zone'));
        }
        else
            zoneEl = this.querySelector('[j-dashlet-zone]');
        zoneEl && (dashletsInZone = zoneEl.querySelectorAll('[j-type="j-dashlet"]').length);
        pos.x = pos.x || 0;
        pos.y = pos.y || 0;
        pos.z = pos.z || 0;
        pos.y = Math.min(pos.y, dashletsInZone);
        return pos;
    };
    DashboardLayout.prototype.autoArrangeElements = function (zoneId, type) {
        var zone = this.querySelector("[j-dashlet-zone=\"" + zoneId + "\"]");
        if (!zone) {
            zone = this.querySelector("[j-dashlet-zone]");
        }
        var elements = zone.querySelectorAll("[j-type=\"" + type + "\"]:not(template)");
        for (var i = 0; i < elements.length; i++) {
            var pos = {
                zone: zoneId,
                y: i
            };
            this.setElementPosition(elements[i], pos);
        }
    };
    DashboardLayout.prototype.getPositionalChanges = function (from, to) {
        return this.getDashlets();
    };
    DashboardLayout.prototype.placeDashlet = function (dashletElement, to) {
        var _this = this;
        to = this.normalizePosition(to);
        var zoneToAdd = this.querySelector("[j-dashlet-zone=\"" + to.zone + "\"]");
        zoneToAdd = zoneToAdd || this.querySelector('[j-dashlet-zone]');
        if (!dashletElement.panel) {
            dashletElement.panel = this.createPanelForDashlet(dashletElement);
        }
        if (!dashletElement.layout)
            dashletElement.layout = this;
        var dashletId = dashletElement.getAttribute('j-provider-id') || dashletElement.id;
        var existingPos = this.getElementPosition(dashletElement);
        if (dashletElement.panel.parentElement == zoneToAdd) {
            dashletElement.panel.remove();
            to = this.normalizePosition(to);
        }
        var dashletsInZone = helper_1.default.getElementsNotIn(zoneToAdd, '[j-type="j-dashlet"]', '[j-type="j-dashlet-zone-group"]');
        var nearestDashlet = undefined;
        this.setElementPosition(dashletElement, to);
        this.setDashletProperties(dashletElement);
        for (var i = 0; i < dashletsInZone.length; i++) {
            var dashlet = dashletsInZone[i];
            var existingPos = this.getElementPosition(dashlet);
            if (to.y <= (existingPos.y || 0)) {
                nearestDashlet = nearestDashlet || dashlet;
            }
        }
        if (nearestDashlet)
            zoneToAdd.insertBefore(dashletElement.panel || dashletElement, nearestDashlet.panel);
        else
            zoneToAdd.appendChild(dashletElement.panel || dashletElement);
        this.autoArrangeElements(to.zone, 'j-dashlet');
        if (this.viewMode == exports.LayoutViewMode.editable || this.viewMode == exports.LayoutViewMode.dashletedit) {
            this.createDashletDropzones();
        }
        this.collapseDashlet(dashletElement, this.dashletsCollapsed);
        var createPromise;
        if (this.dashboard.state == dashboard_1.DashboardState.loading)
            return Promise.resolve(dashletElement);
        if (dashletElement.status == dashlet_1.IDashletElementStatus.created)
            createPromise = this.dashboard.provider.createDashlet(dashletElement.model).then(function (createResult) {
                dashletElement.model.id = createResult.id;
                dashletElement.status == dashlet_1.IDashletElementStatus.loaded;
                dashletElement.updateFromModel();
                return dashletElement;
            });
        else
            createPromise = Promise.resolve(dashletElement);
        return createPromise.then(function (dashletEl) {
            return _this.save();
        });
    };
    DashboardLayout.prototype.removeDashlet = function (dashletElement) {
        var _this = this;
        dashletElement.panel.remove();
        return this.save().then(function () { return _this.createDashletDropzones(); });
    };
    DashboardLayout.prototype.cloneDashlet = function (dashletElement) {
        var _this = this;
        var config = dashletElement.config ? JSON.parse(JSON.stringify(dashletElement.config)) : null;
        var model = dashletElement.model ? JSON.parse(JSON.stringify(dashletElement.model)) : {};
        model.title = "Copy " + (model && model.title);
        config && (model.configuration = config);
        return this.dashboard.provider.createDashlet(model).then(function (result) {
            Object.keys(result).forEach(function (key) { return model[key] = result[key]; });
            var copyElement = _this.generateDashletElement(model, dashlet_1.IDashletElementStatus.created);
            return _this.placeDashlet(copyElement, _this.getElementPosition(dashletElement));
        });
    };
    DashboardLayout.prototype.reset = function (newMode) {
        var dashlets = this.querySelectorAll('[j-type="j-dashlet"]');
        for (var i = 0; i < dashlets.length; i++)
            ((dashlets[i].panel) || dashlets[i]).remove();
        newMode = newMode || this.viewMode;
        if (this.viewMode == newMode)
            this.setViewMode(newMode);
        else
            this.viewMode = newMode;
    };
    DashboardLayout.prototype.getElementPosition = function (el) {
        var pos = {
            zone: el.getAttribute('j-zone'),
            x: el.getAttribute('j-x') ? parseInt(el.getAttribute('j-x')) : undefined,
            y: el.getAttribute('j-y') ? parseInt(el.getAttribute('j-y')) : undefined,
            z: el.getAttribute('j-z') ? parseInt(el.getAttribute('j-z')) : undefined,
        };
        return pos;
    };
    DashboardLayout.prototype.setElementPosition = function (el, position) {
        position.zone ? el.setAttribute('j-zone', position.zone) : el.removeAttribute('zone');
        position.x ? el.setAttribute('j-x', position.x.toString()) : el.removeAttribute('j-x');
        position.y ? el.setAttribute('j-y', position.y.toString()) : el.removeAttribute('j-y');
        position.z ? el.setAttribute('j-z', position.z.toString()) : el.removeAttribute('j-z');
        el['model'] && (el['model'].position = position);
    };
    DashboardLayout.prototype.moveDashlet = function (dashletElement, to) {
        var oldPosition = this.getElementPosition(dashletElement);
        var allowDrag = allowDrag = helper_1.default.fireEvent(dashletElement, 'drag-start', {
            from: oldPosition,
            to: to
        }, true) && helper_1.default.fireEvent(document, 'jdash:dashlet.drag-start', {
            target: dashletElement,
            from: oldPosition,
            to: to
        }, true);
        if (allowDrag) {
            this.placeDashlet(dashletElement, to);
            return [dashletElement];
        }
        else
            return [];
    };
    DashboardLayout.prototype.getDashletsByPosition = function (position) {
        var query = '[j-type="j-dashlet"]';
        query = position.zone ? query.concat("[j-zone=\"" + position.zone + "\"]") : query;
        query = position.x ? query.concat("[j-x=\"" + position.x + "\"]") : query;
        query = position.y ? query.concat("[j-y=\"" + position.y + "\"]") : query;
        query = position.z ? query.concat("[j-z=\"" + position.z + "\"]") : query;
        return this.querySelectorAll(query);
    };
    DashboardLayout.prototype.getDashletAt = function (position) {
        var query = '[j-type="j-dashlet"]';
        query = position.zone ? query.concat("[j-zone=\"" + position.zone + "\"]") : query;
        query = position.x ? query.concat("[j-x=\"" + position.x + "\"]") : query;
        query = position.y ? query.concat("[j-y=\"" + position.y + "\"]") : query;
        query = position.z ? query.concat("[j-z=\"" + position.z + "\"]") : query;
        return this.querySelector(query);
    };
    return DashboardLayout;
}(core_1.ComponentElement));
exports.DashboardLayout = DashboardLayout;

},{"../dashboard":31,"../dashboard/dashlet":28,"../helper":32,"./../core":27}],37:[function(require,module,exports){
"use strict";
var axios = require("axios");
var ApiProvider = (function () {
    function ApiProvider() {
    }
    ApiProvider.getUrl = function () {
        return 'http://localhost:3000/jdash/api/v1';
    };
    ApiProvider.prototype.init = function (tokenProvider) {
        this.tokenProvider = tokenProvider;
    };
    ApiProvider.prototype.refreshUserToken = function () {
        var self = this;
        return new Promise(function (resolve, reject) {
            try {
                self.tokenProvider.getUserToken((function (userToken) {
                    self.currentUserToken = userToken;
                    resolve(userToken);
                }));
            }
            catch (err) {
                reject(err);
            }
        });
    };
    ApiProvider.prototype.getAuthorizationHeaderContent = function () {
        return "Bearer " + this.currentUserToken;
    };
    ApiProvider.prototype.getDefaultRequestConfig = function (url) {
        var _this = this;
        var headers = {};
        var config = {
            baseURL: ApiProvider.getUrl(),
            url: url,
            headers: headers
        };
        if (!this.currentUserToken) {
            return this.refreshUserToken().then(function () {
                headers.Authorization = _this.getAuthorizationHeaderContent();
                return config;
            });
        }
        else {
            headers.Authorization = this.getAuthorizationHeaderContent();
            return Promise.resolve(config);
        }
    };
    ApiProvider.prototype.ensureTokenReceived = function (err, config) {
        var _this = this;
        if (err.code !== "401" || err.config["authRetry"]) {
            throw err;
        }
        return this.refreshUserToken().then(function () {
            config.headers.Authorization = _this.getAuthorizationHeaderContent();
            config["authRetry"] = true;
            return _this.makeRequest(config);
        });
    };
    ApiProvider.prototype.get = function (url) {
        var _this = this;
        return this.getDefaultRequestConfig(url).then(function (requestConfig) {
            requestConfig.method = 'get';
            return _this.makeRequest(requestConfig).then(function (result) { return result.data; });
        });
    };
    ApiProvider.prototype.post = function (url, data) {
        var _this = this;
        return this.getDefaultRequestConfig(url).then(function (requestConfig) {
            requestConfig.method = 'post';
            requestConfig.data = data;
            return _this.makeRequest(requestConfig).then(function (result) { return result.data; });
        });
    };
    ApiProvider.prototype.makeRequest = function (config) {
        var _this = this;
        var request = axios["request"](config).catch(function (err) {
            return _this.ensureTokenReceived(err, config);
        });
        return request;
    };
    ApiProvider.prototype.getDashboard = function (id) {
        return this.get("/dashboard/" + id);
    };
    ApiProvider.prototype.createDashboard = function (model) {
        return this.post("/dashboard/create", model);
    };
    ApiProvider.prototype.getMyDashboards = function (query) {
        return this.get("/dashboard/my");
    };
    ApiProvider.prototype.searchDashboards = function (search, query) {
        return this.post("/dashboard/search", { search: search, query: query });
    };
    ApiProvider.prototype.deleteDashboard = function (id) {
        return this.post("/dashboard/delete/" + id);
    };
    ApiProvider.prototype.saveDashboard = function (id, updateValues) {
        return this.post("/dashboard/save/" + id, updateValues);
    };
    ApiProvider.prototype.createDashlet = function (model) {
        return this.post("/dashlet/create", model);
    };
    ApiProvider.prototype.getDashletsOfDashboard = function (dashboardId) {
        return this.get("/dashlet/bydashboard/" + dashboardId);
    };
    ApiProvider.prototype.deleteDashlet = function (id) {
        return this.post("/dashlet/delete/" + id);
    };
    ApiProvider.prototype.saveDashlet = function (id, updateValues) {
        return this.post("/dashlet/save/" + id, updateValues);
    };
    return ApiProvider;
}());
exports.ApiProvider = ApiProvider;

},{"axios":1}],38:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var core_1 = require("../core");
var ProviderManager = (function () {
    function ProviderManager() {
    }
    ProviderManager.get = function (type) {
        return type ? ProviderManager.providers[type] : ProviderManager.providers[Object.keys(ProviderManager.providers)[0]];
    };
    ProviderManager.register = function (type, provider) {
        ProviderManager.providers[type] = provider;
        return provider;
    };
    return ProviderManager;
}());
ProviderManager.providers = {};
exports.ProviderManager = ProviderManager;
var ProviderElement = (function (_super) {
    __extends(ProviderElement, _super);
    function ProviderElement() {
        return _super.call(this) || this;
    }
    Object.defineProperty(ProviderElement, "observedAttributes", {
        get: function () {
            return ['type'];
        },
        enumerable: true,
        configurable: true
    });
    ProviderElement.locate = function (id) {
        var uniqueInstance = document.querySelector('j-provider');
        if (!id)
            return uniqueInstance;
        var byId = document.querySelector("j-provider#" + id);
        if (byId)
            return byId;
        var byTypes = document.querySelectorAll("j-provider[type=" + id + "]");
        if (byTypes.length > 1)
            throw new Error("There seems " + byTypes.length + " instances for provider type " + id + ". Please set an id and reference using id");
        else if (byTypes.length == 1)
            return byTypes[0];
        else {
            return uniqueInstance;
        }
    };
    ProviderElement.prototype.createProvider = function (constructor, params) {
        this.provider = new constructor(params);
    };
    ProviderElement.prototype.connectedCallback = function () {
        var initProps = {};
        for (var i = 0; i < this.attributes.length; i++)
            if (this.attributes[i].name.toLowerCase() != 'id' && this.attributes[i].name.toLocaleLowerCase() != 'type')
                initProps[this.attributes[i].name] = this.attributes[i].value;
        var constructor = ProviderManager.get(this.getAttribute('type'));
        this.createProvider(constructor, initProps);
        _super.prototype.connectedCallback.call(this);
    };
    return ProviderElement;
}(core_1.HtmlElement));
exports.ProviderElement = ProviderElement;

},{"../core":27}],39:[function(require,module,exports){
"use strict";
var _1 = require("./");
var helper_1 = require("../helper");
var LocalStorageProvider = (function () {
    function LocalStorageProvider(values) {
        this.storage = (values && values['storage'] == 'session') ? window.sessionStorage : window.localStorage;
    }
    LocalStorageProvider.prototype.init = function () {
    };
    LocalStorageProvider.prototype.getCollection = function (type, id) {
        var _this = this;
        var collectionData = this.storage.getItem(type), collection;
        if (!collectionData) {
            collection = [];
            this.storage.setItem(type, JSON.stringify(collection));
        }
        else
            collection = JSON.parse(collectionData);
        return id ? collection.filter(function (item) { return typeof id == 'string' ? item['id'] == id : id.apply(_this, [item]); }) : collection;
    };
    LocalStorageProvider.prototype.addToCollection = function (type, item) {
        var colection = this.getCollection(type);
        colection.push(item);
        this.storage.setItem(type, JSON.stringify(colection));
        return colection;
    };
    LocalStorageProvider.prototype.saveItem = function (type, data) {
        var colection = this.getCollection(type);
        var found = colection.filter(function (item) { return item['id'] == data.id; })[0];
        if (found) {
            var index = colection.indexOf(found);
            colection[index] = data;
        }
        this.storage.setItem(type, JSON.stringify(colection));
        return colection;
    };
    LocalStorageProvider.prototype.removeItem = function (type, id) {
        var colection = this.getCollection(type);
        var found = colection.filter(function (item) { return item['id'] == id; })[0];
        if (found) {
            var index = colection.indexOf(found);
            colection.splice(index, 1);
        }
        this.storage.setItem(type, JSON.stringify(colection));
        return colection;
    };
    LocalStorageProvider.prototype.createDashboard = function (model) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            model.id = model.id || helper_1.default.makeid();
            _this.addToCollection('dashboards', model);
            resolve({
                id: model.id
            });
        });
    };
    LocalStorageProvider.prototype.getMyDashboards = function (query) {
        return this.searchDashboards({
            user: 'me'
        }, query);
    };
    LocalStorageProvider.prototype.searchDashboards = function (search, query) {
        var dashboards = this.getCollection('dashboards');
        var result = {
            data: dashboards,
            hasMore: false
        };
        return Promise.resolve(result);
    };
    LocalStorageProvider.prototype.getDashboard = function (id) {
        var dashboard = this.getCollection('dashboards', id)[0];
        if (dashboard) {
            var dashlets = this.getCollection('dashlets').filter(function (item) { return item.dashboardId == dashboard.id; });
            return Promise.resolve({ dashboard: dashboard, dashlets: dashlets });
        }
        return Promise.reject('not found');
    };
    LocalStorageProvider.prototype.saveDashboard = function (id, updateValues) {
        var _this = this;
        var dashboard = this.getCollection('dashboards', id)[0];
        if (!dashboard)
            return Promise.reject('not found');
        var dashletsInCollection = this.getCollection('dashlets', function (item) { return item.dashboardId == id; });
        updateValues = updateValues || {};
        for (var key in updateValues)
            dashboard[key] = updateValues;
        if (updateValues.layout) {
            dashletsInCollection.forEach(function (dashlet) {
                var foundInLayout = updateValues.layout.dashlets[dashlet.id];
                if (!foundInLayout)
                    _this.removeItem('dashlets', dashlet.id);
            });
        }
        this.saveItem('dashboards', dashboard);
        return Promise.resolve({});
    };
    LocalStorageProvider.prototype.saveDashlet = function (id, updateValues) {
        var dashlet = this.getCollection('dashlets', id)[0];
        if (!dashlet)
            return Promise.reject('not found');
        updateValues = updateValues || {};
        for (var key in updateValues)
            dashlet[key] = updateValues;
        this.saveItem('dashlets', dashlet);
        return Promise.resolve({});
    };
    LocalStorageProvider.prototype.createDashlet = function (model) {
        var _this = this;
        return this.getDashboard(model.dashboardId).then(function (dashboard) {
            model.id = helper_1.default.makeid();
            _this.addToCollection('dashlets', model);
            return {
                id: model.id
            };
        });
    };
    LocalStorageProvider.prototype.deleteDashboard = function (dashboardId) {
        var _this = this;
        return this.getDashboard(dashboardId).then(function (dashboardData) {
            var dashlets = _this.getCollection('dashlets').filter(function (item) { return item.dashboardId == dashboardData.dashboard.id; });
            dashlets.forEach(function (dashlet) { return _this.removeItem('dashlets', dashlet.id); });
            _this.removeItem('dashboards', dashboardId);
        });
    };
    LocalStorageProvider.prototype.deleteDashlet = function (id) {
        this.removeItem('dashlets', id);
        return Promise.resolve();
    };
    return LocalStorageProvider;
}());
LocalStorageProvider.ProviderType = 'localstorage';
LocalStorageProvider.Register = _1.ProviderManager.register(LocalStorageProvider.ProviderType, LocalStorageProvider);
exports.LocalStorageProvider = LocalStorageProvider;

},{"../helper":32,"./":38}],40:[function(require,module,exports){
"use strict";
var provider_1 = require("./provider");
var generic_1 = require("./layout/generic");
var core_1 = require("./core");
var dashlet_1 = require("./dashboard/dashlet");
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    elements: function () {
        window.customElements.define('j-component', core_1.Component);
        window.customElements.define('j-dashlet', dashlet_1.DashletModule);
        window.customElements.define('j-dashlet-editor', dashlet_1.DashletEditorModule);
        window.customElements.define('j-provider', provider_1.ProviderElement);
        window.customElements.define('j-layout', generic_1.GenericLayout);
    }
};

},{"./core":27,"./dashboard/dashlet":28,"./layout/generic":34,"./provider":38}],41:[function(require,module,exports){
"use strict";
var ThemeManager = (function () {
    function ThemeManager() {
    }
    ThemeManager.init = function (name, library) {
        if (this.loadFromLocalstorage()) {
            this.setCurrentTheme(this.currentTheme.name, this.currentThemeLibrary);
        }
        else {
            library = library || 'jdash';
            var themeDefinition = this.themes[library];
            var theme = themeDefinition.filter(function (item) { return item.name == name; })[0] || themeDefinition[0];
            this.setCurrentTheme(theme.name, library);
        }
    };
    ThemeManager.loadFromLocalstorage = function () {
        var savedTheme = localStorage.getItem('j-theme');
        if (savedTheme) {
            var themeData = JSON.parse(savedTheme);
            this.currentThemeLibrary = themeData.library;
            this.currentTheme = themeData.theme;
            return true;
        }
        else
            return false;
    };
    ThemeManager.saveToLocalStorage = function () {
        localStorage.setItem('j-theme', JSON.stringify({
            library: this.currentThemeLibrary,
            theme: this.currentTheme
        }));
    };
    ThemeManager.getThemes = function (library) {
        library = library || 'jdash';
        return this.themes[library];
    };
    ThemeManager.registerDefinition = function (library, definition) {
        this.themes[library] = definition;
    };
    ThemeManager.getCurrentTheme = function () {
        if (this.currentThemeLibrary && this.currentTheme) {
            return {
                library: this.currentThemeLibrary,
                theme: this.currentTheme
            };
        }
        else
            return undefined;
    };
    ThemeManager.clearCurrentTheme = function () {
        var currentTheme = this.getCurrentTheme();
        if (currentTheme) {
            document.body.classList.remove(currentTheme.theme.cssClass);
        }
    };
    ThemeManager.setCurrentTheme = function (name, library) {
        library = library || 'jdash';
        var themeDefinition = this.themes[library];
        var currentTheme = this.getCurrentTheme();
        if (currentTheme)
            this.clearCurrentTheme();
        var theme = themeDefinition.filter(function (item) { return item.name == name; })[0];
        if (theme) {
            document.body.classList.add(theme.cssClass);
            this.currentThemeLibrary = library;
            this.currentTheme = theme;
            this.saveToLocalStorage();
        }
    };
    return ThemeManager;
}());
ThemeManager.themes = {};
exports.ThemeManager = ThemeManager;
ThemeManager.registerDefinition('jdash', [
    { cssClass: 'j-theme-jdash', name: 'JDash' },
    { cssClass: 'j-theme-jdash-dark', name: 'JDash Dark' },
    { cssClass: 'j-theme-red', name: 'Red' },
    { cssClass: 'j-theme-green', name: 'Green' },
    { cssClass: 'j-theme-blue', name: 'Blue' },
    { cssClass: 'j-theme-yellow', name: 'Yellow' },
    { cssClass: 'j-theme-black', name: 'Black' },
    { cssClass: 'j-theme-gray', name: 'Gray' }
]);

},{}]},{},[33]);
